name: testing
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose the env to deploy (Dev or Prod)?'
        required: true
        type: choice
        options:
          - Dev
          - Prod
          - Prod1
      Filters:
        description: 'Choose the required component'
        required: true
        type: string
        
jobs:
  copy_files:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    outputs:
      components-info: ${{ steps.fullstack.outputs.backend-components }}
      filteredData: ${{ steps.filter-step.outputs.filteredData }}  # Corrected output name
   
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: set full stack
        id: fullstack
        if: ${{ inputs.Filters == 'fullstack' }}
        shell: bash
        run: |
          echo "backend-components=`perl -pe 's/\s+//g' ./job_dependencies/job_dependencies.json`" >> $GITHUB_OUTPUT
        
      - name: Filtering JSON data
        id: filter-step
        if: ${{ inputs.Filters != 'fullstack' }}
        shell: bash
        run: |
          chosencomponents="${{ github.event.inputs.Filters }}"
          filteredData=$(jq -c --arg chosenCom "$chosencomponents" '.[] | select(.name == $chosenCom)' job_dependencies/job_dependencies.json)
          echo "::set-output name=filteredData::$filteredData"  # Corrected output name
    
     
  Comparison:
    runs-on: ubuntu-latest
    needs: copy_files
    continue-on-error: true
    strategy:
      matrix:
        components: ${{ fromJSON(needs.copy_files.outputs.components-info) }}
      fail-fast: false
      max-parallel: 1
    env:
      name: ${{ matrix.components.name }}
      version: ${{ matrix.components.version }}
    steps:
      - name: filtered_data_iteration
        run: |
          filteredData=$(echo '${{ needs.copy_files.outputs.filteredData }}' | jq -c '.')
          for data in $filteredData; do
            name1=$(echo $data | jq -r '.name')
            version1=$(echo $data | jq -r '.version')
            echo "Name1: $name1"
            echo "Version1: $version1"
          done
