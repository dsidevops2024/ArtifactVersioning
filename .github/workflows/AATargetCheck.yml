name: AATargetCheck Workflow

on:
  workflow_dispatch:
    inputs:
      component:
        description: 'Input the component to deploy full stack?'
        required: true
        type: string
      environment:
        description: 'Choose env to deploy (Dev or Prod)?'
        required: true
        type: choice
        options:
          - dev
          - prod
      prod_sub_env:
        description: 'Specify the client(s) to deploy (comma-separated for multiple env)'
        required: false
        type: string
        default: 'all'

jobs:
  create-environment-matrix:
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.env-matrix.outputs.env }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get environment input and create matrix
        id: env-matrix
        shell: bash
        run: |
          selected_envs=""

          # For prod environment
          if [[ "${{ inputs.environment }}" == "prod" ]]; then
            if [[ "${{ inputs.prod_sub_env }}" == "all" ]]; then
              # If 'all' is selected, output all environments from prod-clients.json
              echo "env=$(jq -c '.[].env' ./client-manifests/${{ inputs.environment }}-clients.json)" >> $GITHUB_OUTPUT
            else
              # If specific environments are selected in prod_sub_env, process the list of environments
              IFS=',' read -ra target_envs <<< "${{ inputs.prod_sub_env }}"
              for envs in "${target_envs[@]}"; do
                matching_env=$(jq -c ".[] | select(.env == \"$envs\") | .env" ./client-manifests/${{ inputs.environment }}-clients.json)
                if [[ -z "$matching_env" ]]; then
                  echo "Error: No matching environment found for '$envs' in '${{ inputs.environment }}'"
                  exit 1
                else
                  # Append the matching environment to selected_envs
                  selected_envs="$selected_envs,$matching_env"
                fi
              done
              # Remove leading comma and ensure it's a valid JSON array
              selected_envs="[${selected_envs#,}]"
              echo "env=$selected_envs" >> $GITHUB_OUTPUT
            fi
          else
            # For dev environment, just read the entire file and format as a JSON array
            echo "env=$(jq -c '.[].env' ./client-manifests/${{ inputs.environment }}-clients.json)" >> $GITHUB_OUTPUT
          fi

      - name: Print the selected environment(s)
        run: |
          echo "Selected environment(s): ${{ steps.env-matrix.outputs.env }}"

  check-component-input:
    runs-on: ubuntu-latest
    needs: create-environment-matrix
    outputs:
      runner: ${{ steps.env-runner.outputs.runner }}

    steps:
      - name: set runner group
        id: env-runner
        run: |
          if [[ "${{ inputs.environment }}" == "prod" ]]; then
            echo "runner=prod" >> $GITHUB_OUTPUT
          else
            echo "runner=Nonprod" >> $GITHUB_OUTPUT
          fi


SphereCo Update
Code Signing Implementation
We have successfully implemented a code signing certificate in our GitHub CI/CD pipelines. This ensures that only verified and untampered code progresses through the pipeline, establishing a chain of trust from commit to deployment. This enhancement improves both security and accountability and is now live in production.

Artifact Versioning
We have conducted thorough research and documentation on artifact versioning. Our team is actively working on integrating artifact versioning into our CI/CD pipelines. This will enable binary promotion across multiple environments and ensure reliable deployments by uniquely identifying each build. The goal is to enhance consistency, traceability, and rollback capabilities â€” safeguarding against the deployment of unintended or unstable code.

Internal Updates
DevOps Team Expansion
We are pleased to welcome Keerthivasan and Poornadharshini to our DevOps team. They will be contributing to ongoing infrastructure and automation efforts.

Power BI Team Update
Kamal Das has joined the Power BI team and will be supporting dashboard development and reporting initiatives.

Dresser Utility Project
SharePoint & Power Platform
A new ID has been created for the SharePoint Developer role. Divya is now leading efforts related to SharePoint, Power Automate, and Power Apps within the Dresser Utility Project.

