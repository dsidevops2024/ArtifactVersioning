name: deploy control
run-name: Deploy ${{ inputs.component }} to ${{ inputs.environment }}

on:
  workflow_dispatch:
    inputs:
      component:
        description: Input the component you wish to deploy. Use "fullstack" to deploy the entire app stack.
        required: true
        type: string
      environment:
        description: Select a deployment environment.
        type: choice
        options:
          - dev
          - qa
          - uat
          - prod
          - id
          - standalone
        required: true
      target_environment:
        description: "Input target environment(s) for Prod. For multiple environments input them with comma separated i.e. (env1, env2)"
        type: string
        default: 'All'
        required: false
      keep:
        description: Check to Overwrite the current AppConfig.
        type:  boolean
        required: false

permissions:
  contents: read
  id-token: write

jobs:    
  check-component-input:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      component: ${{ steps.component-input.outputs.component }}
    steps:
      - name: checkout code
        uses: actions/checkout@v4 
      - name: check component input 
        id: component-input
        shell: bash
        run: |
          temp="${{ inputs.component }}"
          lower=${temp,,}
          if [[ "$lower" == "fullstack" ]]; then
            echo "component=fullstack" >> $GITHUB_OUTPUT
            echo "Deploying fullstack"
          else 
            comp=`jq '.[] | .componentName' component.json | grep -i "\<${{ inputs.component }}\>" -m1`
            lowercomp=${comp,,}
            if [[ $lowercomp == "\"${lower}\"" ]]; then
              echo "Deploying `cat ./component.json | grep -iF -o "${{ inputs.component }}" -m1`"
              echo "component=`cat ./component.json | grep -iF -o "${{ inputs.component }}" -m1`" >> $GITHUB_OUTPUT
            else
              echo "Error: Component '${{ inputs.component }}' not found in component.json"
              exit 1
            fi
          fi
  create-environment-matrix:
    needs: check-component-input
    runs-on: ubuntu-latest
    outputs:
        env: ${{ steps.env-matrix.outputs.env }}
    steps:
      - name: checkout code
        uses: actions/checkout@v4  
      - name: get environment input and created matrix
        id: env-matrix
        shell: bash
        run: |
          input_envs=$(echo "${{ inputs.target_environment }}" | tr -d '[:blank:]')
          if [[ "${{ inputs.environment }}" == "prod" ]]; then
            if [[ "$input_envs" == "All" ]]; then
              echo "env=`cat ./client-manifests/${{ inputs.environment }}-clients.json | jq -c`" >> $GITHUB_OUTPUT
            else
              deploy_envs="["
              IFS=',' read -ra ENV_ARRAY <<< "$input_envs"
              for env in "${ENV_ARRAY[@]}"; do
                matching_env=$(jq -c ".[] | select(.env == \"$env\")" ./client-manifests/${{ inputs.environment }}-clients.json)
                 
                if [[ -z "$matching_env" ]]; then
                  echo "Error: No matching environment found for '$env' in ${{ inputs.environment }}-clients.json"
                  exit 1
                else
                  if [[ -z "$deploy_envs" || "$deploy_envs" == "[" ]]; then
                    deploy_envs="$deploy_envs$matching_env"
                  else
                    deploy_envs="$deploy_envs, $matching_env"
                  fi
                fi
              done
              deploy_envs="$deploy_envs]"
              echo "env=$deploy_envs" >> $GITHUB_OUTPUT
            fi
          else
            echo "env=`cat ./client-manifests/${{ inputs.environment }}-clients.json | jq -c`" >> $GITHUB_OUTPUT
          fi
  
  set-environment-runner:
    runs-on: ubuntu-latest
    outputs:
      runner: ${{ steps.env-runner.outputs.runner }}
    steps:
      - name: set runner group
        id: env-runner
        run: |
          if [[ ${{ inputs.environment }} == "prod" ]]; then
            echo "runner=Prod" >> $GITHUB_OUTPUT
          else
            echo "runner=NonProd" >> $GITHUB_OUTPUT
          fi
  call-phase:
    needs: [check-component-input, create-environment-matrix]
    uses: ./.github/workflows/deploy-phas1.yml
    with: 
      component: ${{ inputs.component }}
      environment: ${{ inputs.environment }}
      runner: ${{ inputs.runner }}

  collect-control-status:
    needs: [check-component-input, create-environment-matrix, set-environment-runner, call-phase]
    runs-on: ubuntu-latest
    outputs:
      con-status: ${{ steps.get_status.outputs.controllerstatus }}
      phase-status: ${{ steps.get_status.outputs.phasejobs }}
    
    steps:
      - name: Get Job Statuses from GitHub API
        id: get_status
        run: |
          STATUSES=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs" | \
            jq -r '[.jobs[] | select(.name != "collect-control-status") | "\(.name) status: \(.conclusion // "in_progress")"] | join(", ")')

             # Display the collected statuses
            echo "Collected statuses: $STATUSES"
    
             # Extract controller statuses (jobs with no slashes)
            controllerstatus=$(echo $STATUSES | tr ',' '\n' | grep -v '/' | tr '\n' ',' | sed 's/,$//')

             # Extract phase statuses (jobs with one slash)
            #phasejobs=$(echo $STATUSES | tr ',' '\n' | grep -E '^([^/]+ /[^/]+)' | tr '\n' ',' | sed 's/,$//')
            # Extract only the part after the first slash in phase statuses (values after the slash)
            #phasejobs=$(echo $STATUSES | tr ',' '\n' | grep -E '^[^/]+/[^/]+ ' | sed -E 's/^[^/]+\/([^/]+).*status: ([^ ]+)/\1 status: \2/g' | tr '\n' ',' | sed 's/,$//')
            #phasejobs=$(echo "$STATUSES" | tr ',' '\n' | grep -E '^[^/]+/[^/]+ ' | sed -E 's/^[^/]+\/([^/]+).*status: ([^ ]+)/\1status: \2/g' | tr '\n' ',' | sed 's/,$//')
            phasejobs=$(echo "$STATUSES" | tr ',' '\n' | grep -E '^[^/]+/[^/]+ ' | sed -E 's/^[^/]+\/([^/]+).*status: ([^ ]+)/\1 status: \2/g' | sort -u | tr '\n' ',' | sed 's/,$//')

             # Extract component phase statuses (jobs with two slashes)
            compstatusone=$(echo $STATUSES | tr ',' '\n' | grep -E '^([^/]+ /[^/]+ /[^/]+)' | tr '\n' ',' | sed 's/,$//')

             # Debug output for verification
            echo "Controller Statuses: $controllerstatus"
            echo "Phase Statuses: $phasejobs"
            echo "Component Phase Statuses: $compstatusone"

            # Export the variables to be used in the next steps or jobs by writing to the GITHUB_OUTPUT file
            echo "controllerstatus=$controllerstatus" >> $GITHUB_OUTPUT
            echo "phasejobs=$phasejobs" >> $GITHUB_OUTPUT
            echo "compstatusone=$compstatusone" >> $GITHUB_OUTPUT
        shell: bash

  report-job-status:
    needs: [check-component-input, create-environment-matrix, set-environment-runner, call-phase, collect-control-status]
    runs-on: windows-latest
    steps:
       - name: Checkout repository
         uses: actions/checkout@v3
     
       - name: Run PowerShell script to report job statuses
         id: report-status
         shell: pwsh
         run: |
           #$ErrorActionPreference = "Stop"
           .\.github\scripts\dynamic-handling-new.ps1 -controllerStatus "${{ needs.collect-control-status.outputs.con-status }}" `
            -phaseStatus "${{ needs.needs.collect-control-status.outputs.phase-status }}" `
            -compStatusPhase1 "${{ needs.call-phase.outputs.comp-status-phase1 }}" `
            -compStatusPhase2 "${{ needs.call-phase.outputs.comp-status-phase2 }}" `
            -compStatusPhase3 "${{ needs.call-phase.outputs.comp-status-phase3 }}"
           
       - name: Use the outputs from report-job-status
         run: |
           echo "ControllerJobStatus:"
           #echo "${{ steps.report-status.outputs.Controller-Job-Status }}"
           echo "${{ steps.report-status.outputs.controller-status }}"
           echo "ControllerJob1Status:"
           echo "${{ steps.report-status.outputs.check-component-input-status }}"
           echo "ControllerJob2Status:"
           echo "${{ steps.report-status.outputs.create-environment-matrix-status }}"
           echo "ControllerJob3Status:"
           echo "${{ steps.report-status.outputs.set-environment-runner-status }}"
           echo "OverallPhaseJobStatus:"
           echo "${{ steps.report-status.outputs.overall-phase-status }}"
           echo "Overall_Job_Status_phase1:"
           echo "${{ steps.report-status.outputs.Check-Approvals_status }}"
           echo "Overall_Job_Status_phase2:"
           echo "${{ steps.report-status.outputs.deploy-single-component_status }}"
           echo "Overall_Job_Status_phase3:"
           echo "${{ steps.report-status.outputs.deploy-phase-one_status }}"
           echo "Overall_Job_Status_phase4:"
           echo "${{ steps.report-status.outputs.deploy-phase-two_status }}"

           echo "ComponentJobStatus-for-Phase2check:"
           echo "${{ steps.report-status.outputs.deploy-single-component-status }}"         
           echo "ComponentJobStatus-for-Phase2-job1-check:"
           echo "${{ steps.report-status.outputs.deploy-single-component-create-component-matrix-status }}"
           echo "ComponentJobStatus-for-Phase2-job2-check:"
           echo "${{ steps.report-status.outputs.deploy-single-component-deploy-to-AzService-status }}"        
           echo "ComponentJobStatus-for-Phase3check:"
           echo "${{ steps.report-status.outputs.deploy-phase-one-status }}"
           echo "ComponentJobStatus-for-Phase3-job1check:"
           echo "${{ steps.report-status.outputs.deploy-phase-one-create-component-matrix-status }}"
           echo "ComponentJobStatus-for-Phase3-job2check:"
           echo "${{ steps.report-status.outputs.deploy-phase-one-deploy-to-AzService-status }}"
           echo "ComponentJobStatus-for-Phase4check:"
           echo "${{ steps.report-status.outputs.deploy-phase-two-status }}"
           echo "ComponentJobStatus-for-Phase4-job1check:"
           echo "${{ steps.report-status.outputs.deploy-phase-two-create-component-matrix-status }}"
           echo "ComponentJobStatus-for-Phase4-job2check:"
           echo "${{ steps.report-status.outputs.deploy-phase-two-deploy-to-AzService-status }}"

           
           
