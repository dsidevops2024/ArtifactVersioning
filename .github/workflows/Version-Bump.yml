name: Version Bump

on:
  #pull_request:
    #types: [closed]
  workflow_dispatch:

jobs:
  bump_versions:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get current JSON_VERSIONS
        run: echo '${{ vars.JSON_VERSIONS }}' > versions.json

      - name: Fetch PR commit messages
        run: |
          echo "Fetching commit messages from PR..."
          COMMITS=$(gh pr view ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --json commits --jq '.commits[].message')
          echo "$COMMITS" > commit_messages.txt
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Determine version bumps
        shell: pwsh
        run: |
          $commits = Get-Content commit_messages.txt
          
          foreach ($commit in $commits) {
            Write-Host "- $commit"
          }
          
          # Define priorities
          $priority = @{
            "patch" = 0
            "minor" = 1
            "major" = 2
          }

          $bumpKeywords = @{
            "fix" = "patch"
            "feat" = "minor"
            "breakingchange" = "major"
            "BREAKING CHANGE" = "major"
          }

          $componentBumps = @{}

          # Process commits to find bump per component
          foreach ($commit in $commits) {
           if ($commit -match "^(?<type>\w+)\((?<component>[^)]+)\):") {
               $type = $matches['type'].ToLower()
               $component = $matches['component'].ToLower()

               if ($bumpKeywords.ContainsKey($type)) {
                   $bump = $bumpKeywords[$type]
                   if ($componentBumps.ContainsKey($component)) {
                      if ($priority[$bump] -gt $priority[$componentBumps[$component]]) {
                           $componentBumps[$component] = $bump
                       }
                   } else {
                       $componentBumps[$component] = $bump
                   }
              }
           }
           elseif ($commit -match "BREAKING CHANGE.*\((?<component>[^)]+)\)") {
               $component = $matches['component'].ToLower()
               $componentBumps[$component] = "major"
           }
          }

          # Load versions.json content
          Write-Host "Versions file content:"
          Get-Content versions.json | ForEach-Object { Write-Host $_ }

          $versionsRaw = Get-Content versions.json | ConvertFrom-Json

          # Convert versions keys to lowercase for safe lookup
          $versions = @{}
          $versionsRaw.PSObject.Properties | ForEach-Object {
              $versions[$_.Name.ToLower()] = $_.Value
          }

          $updates = @{}

          # Calculate new versions per component bump
          foreach ($component in $componentBumps.Keys) {
             if (-not $versions.ContainsKey($component)) {
                Write-Host "Component '$component' not found in versions.json"
             continue
           }

              $currentVersion = $versions[$component]

              $parts = $currentVersion -split '\.'
              $major = [int]$parts[0]
              $minor = [int]$parts[1]
              $patch = [int]$parts[2]

              switch ($componentBumps[$component]) {
                 "major" {
                     $major += 1
                     $minor = 0
                     $patch = 0
                    }
                 "minor" {
                    $minor += 1
                    $patch = 0
                  }
                 "patch" {
                    $patch += 1
                  }
               }

              $newVersion = "$major.$minor.$patch"
              Write-Host "Updating component '$component' from $currentVersion to $newVersion"

              $versions[$component] = $newVersion
              $updates[$component] = $newVersion
             }

             # Save updated versions back to versions.json
             # Convert back to original casing if needed - here, just output lowercase keys
             $versions | ConvertTo-Json -Depth 10 | Set-Content versions.json

             # Output updates for next step
             $updates | ConvertTo-Json -Compress | Out-File -FilePath updated_versions.json

      - name: Merge and update JSON_VERSIONS
        run: |
          jq -s '.[0] * .[1]' versions.json updated_versions.json > merged.json
          gh variable set JSON_VERSIONS --body "$(cat merged.json)" --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
