name: RepoTest
on:
  workflow_dispatch:
    inputs:
      environment:
        description: Input the env
        required: true
        default: dev
      stage:
        description: Input the stage
        required: true
        default: dev
      component: 
        description: Input the stage
        required: true
        default: worker
jobs:
  job1:
    #runs-on: self-hosted
    runs-on: [win-runner]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        
      #- name: Checking and delete sb Directory on Windows
        #if: runner.os == 'Windows'
        #shell: powershell
        #run: |
         #$folderName = "${{ vars.FOLDER_NAME }}"
         #$folderpath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "${{ vars.FOLDER_NAME }}"
         #Write-Host "Folder Path: $folderpath"

      #- name: Checking and delete sb Directory on Linux/macOS
        #if: runner.os != 'Windows'
        #shell: pwsh
        #run: |
          #$folderName = "${{ vars.FOLDER_NAME }}"
          #$folderpath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "${{ vars.FOLDER_NAME }}"
          #Write-Host "Folder Path: $folderpath"
      - name: Checking and delete sb Directory
        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          folderName="${{ vars.FOLDER_NAME }}"
          folderpath="$GITHUB_WORKSPACE/$folderName"
          echo "Folder Path: $folderpath"
          shell: bash

      #- name: Checking and delete sb Directory
        #run: |
          # Extract repository name from the GitHub repository context
          #$repoOwner = "${{ github.repository_owner }}"
          #Write-Host "Repository Owner: $repoOwner"  
          #$repoName = "${{ github.repository }}" -split '/' | select -First 1
          #Write-Host "Repository Name: $repoName"
          # Get the folder name from the input or use the default
          #$folderName = "${{ inputs.folder-name }}"
          #$folderName = "${{ vars.FOLDER_NAME }}"
          # Construct the folder path dynamically, using Join-Path for cross-platform compatibility
          #$folderpath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "${{ vars.FOLDER_NAME }}"
          # Construct the folder path dynamically using the repository name and folder name
          #$folderpath = "$env:GITHUB_WORKSPACE\$repoName\$repoName\$folderName"
          #$folderpath = "$env:GITHUB_WORKSPACE\$folderName"
          
          #folderName="${{ vars.FOLDER_NAME }}"
          #folderpath="$GITHUB_WORKSPACE/${{ vars.FOLDER_NAME }}"
          #echo "Folder Path: $folderpath"
        #shell: bash
        #shell: pwsh
        
      - name: Extract branch name from JSON
        id: extract-branch
        shell: powershell
        run: |
          # Ensure jq is in the path
          #$env:Path += "; C:\ProgramData\chocolatey\bin"
          # Try to get the path of jq dynamically
          $jqPath = (Get-Command jq -ErrorAction SilentlyContinue).Source
          if (-not $jqPath) {
               Write-Host "jq not found in the system PATH"
          exit 1
          }
 
          # Add jq's path to the PATH variable (if not already in the environment path)
          if (-not ($env:Path -contains [System.IO.Path]::GetDirectoryName($jqPath))) {
             #$env:Path += ";" + [System.IO.Path]::GetDirectoryName($jqPath)
             $env:Path += [System.IO.Path]::GetDirectoryName($jqPath)
          }
 
          Write-Host "Checking path: $env:Path"
    
          # Extract the branch name from component.json where Phase is "2"
          $sb_branchname = jq -r '.[] | select(.Phase == "2") | .Branch' component.json
    
          # Check if the branch name is empty
          if (-not $sb_branchname) {
             Write-Output "Branch name is empty or not found."
          exit 1
          }
          else {
             # Output the branch name (set-output is used for GitHub Actions)
             Write-Output "::set-output name=sb_branchname::$sb_branchname"
             Write-Host "Branch name: $sb_branchname"
          }

        
      #- name: Extract branch name from JSON
        #env:
          #AZURE_CLI_PATH: ${{ vars.AZURE_CLI_PATH }}  # Use the environment variable for the Azure CLI path
        #run: |
          #$env:Path += ";$env:AZURE_CLI_PATH"  # Dynamically append the Azure CLI path
          #Write-Host "Updated PATH: $env:Path"
          #$env:Path += ";C:\ProgramData\chocolatey\lib\jq\tools"
        #shell: powershell
          
  check-component-input:
    needs: job1
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      component: ${{ steps.component-input.outputs.component }}
    steps:
      - name: checkout code
        uses: actions/checkout@v4 
      - name: check component input 
        id: component-input
        shell: bash
        run: |
          temp="${{ inputs.component }}"
          lower=${temp,,}
          if [[ "$lower" == "fullstack" ]]; then
            echo "component=fullstack" >> $GITHUB_OUTPUT
            echo "Deploying fullstack"
          else 
            comp=`jq '.[] | .componentName' component.json | grep -i "\<${{ inputs.component }}\>" -m1`
            lowercomp=${comp,,}
            if [[ $lowercomp == "\"${lower}\"" ]]; then
              echo "Deploying `cat ./component.json | grep -iF -o "${{ inputs.component }}" -m1`"
              echo "component=`cat ./component.json | grep -iF -o "${{ inputs.component }}" -m1`" >> $GITHUB_OUTPUT
            else
              echo "Error: Component '${{ inputs.component }}' not found in component.json"
              exit 1
            fi
          fi
      - name: Print component output
        run: echo "${{ steps.component-input.outputs.component }}"

  #deploy-to-AzService:
    #runs-on: self-hosted
    #needs: [ job1, check-component-input ]
    #if: ${{ needs.check-component-input.outputs.component != '[]'}}
    #environment: ${{ inputs.environment }}
    #strategy:
      #matrix:
        #component: ${{ fromJSON(needs.check-component-input.outputs.component) }}
    #env:
      #Code-Repository: ${{ github.repository_owner }}/${{ matrix.component.Repo }}
      #baseRepo: ${{ matrix.component.Repo }}
    #steps:
      #- name: checkout
        #uses: actions/checkout@v4
        
      #- name: Print Code-Repository value
        #run: |
          #echo "Code-Repository value: ${{ github.repository_owner }}/${{ matrix.component.Repo }}"
          #echo "Base Repo value: ${{ matrix.component.Repo }}"
      #- name: call deploy-webapp action
        #if: ${{ matrix.component.deployType == 'Deploy-WebApp' }} 
        #uses: ./.github/actions/Deploy-WebApp
        #with:
          #component: ${{ matrix.component.componentName }}
          #baseRepo: ${{ env.Repo }}

  
  Check-Approvals:
      needs: [ job1, check-component-input ]
      runs-on: ubuntu-latest
      environment: ${{ inputs.environment }}
      steps:
        - name: turn off review reqs on env
          if: ${{ inputs.stage == 'dev'}}
          run: |
           curl -L -X PUT -H "Accept: application/vnd.github+json" \
           -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
           -H "X-GitHub-Api-Version: 2022-11-28" "https://api.github.com/repos/${{ github.repository }}/environments/${{ inputs.environment }}" \
           -d '{"reviewers":null, "wait_timer":0,"deployment_branch_policy":{"protected_branches":false,"custom_branch_policies":true}}'
