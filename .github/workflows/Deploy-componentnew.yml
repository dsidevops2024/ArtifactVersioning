name: Deploy Component New
on:
  workflow_dispatch:
    inputs:
      component:
        description: Input the component you wish to deploy. Use "fullstack" to deploy the entire app stack.
        required: true
        type: string
      environment:
        description: Select a deployment environment.
        type: choice
        options:
          - dev
          - qa
          - uat
          - prod
          - id
          - standalone
        required: true
      target_environment:
        description: "Input target environment(s) for Prod. For multiple environments input them with comma separated i.e. (env1, env2)"
        type: string
        default: 'All'
        required: false
      keep:
        description: Check to Overwrite the current AppConfig.
        type:  boolean
        required: false
          
permissions:
  contents: read
  id-token: write
  #workflow_call:
    #inputs:
      #component:
        #type: string
        #required: true
      #environment:
        #type: string
        #required: true
      #runner:
        #type: string
        #required: true
    #outputs:        
      #compstatus:
        #value: ${{ jobs.component-status.outputs.output1 }}
    
jobs:
  create-component-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Job 1 step
        id: step1
        run: |
          echo "firstword=job1 from deploy component" 

  deploy-to-AzService:
    runs-on: ubuntu-latest
    needs: create-component-matrix
    steps:
      - name: Job 2 step
        id: step2  # We add an ID for job2
        run: |
          echo "secondword=job2 from deploy component" 
  
  component-status:
    runs-on: ubuntu-latest
    needs: [create-component-matrix, deploy-to-AzService]
    outputs:
      output1: ${{ steps.report-status.outputs.compjob }}
    steps:
      - name: Report job statuses
        id: report-status
        run: |
          compjob="create-component-matrix status: ${{ needs.create-component-matrix.result }}, "
          compjob+="deploy-to-AzService status: ${{ needs.deploy-to-AzService.result }}"
          echo "compjob=$compjob" >> $GITHUB_OUTPUT

  extract-job-names:
    runs-on: ubuntu-latest
    steps:
      - name: Extract job names using PowerShell
        shell: pwsh
        run: |
          # Read the YAML file and extract job names using PowerShell
          $yamlFilePath = ".github/workflows/Deploy-componentnew.yml"

          # Read the YAML content as text
          $yamlContent = Get-Content $yamlFilePath

          # Find all job names (assuming jobs are listed as keys at the top level)
          $jobNames = $yamlContent | Select-String -Pattern '^\s*(\w+):' | ForEach-Object { $_.Matches.Groups[1].Value }

          # Filter out the 'jobs' section itself
          $jobNames = $jobNames | Where-Object { $_ -ne 'jobs' }

          # Print the job names
          Write-Host "Job names extracted: $($jobNames -join ', ')"

          # Optionally, you can save them to an output file if you need
          # $jobNames | Out-File 'extracted_job_names.txt'
