name: spherecode
run-name: Deploy ${{ inputs.component }} to ${{ inputs.environment }}

on:
  workflow_dispatch:
    inputs:
      component:
        description: Input the component you wish to deploy. Use "fullstack" to deploy the entire app stack.
        required: true
        type: string
      environment:
        description: Select a deployment environment.
        type: choice
        options:
          - dev
          - qa
          - uat
          - prod
          - id
          - standalone
        required: true
      target_environment:
        description: "Input target environment(s) for Prod. For multiple environments input them with comma separated i.e. (env1, env2)"
        type: string
        default: 'All'
        required: false
      keep:
        description: Check to Overwrite the current AppConfig.
        type:  boolean
        required: false
          
permissions:
  contents: read
  id-token: write

jobs:    
  check-component-input:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      component: ${{ steps.component-input.outputs.component }}
    steps:
      - name: checkout code
        uses: actions/checkout@v4 
      - name: check component input 
        id: component-input
        shell: bash
        run: |
          temp="${{ inputs.component }}"
          lower=${temp,,}
          if [[ "$lower" == "fullstack" ]]; then
            echo "component=fullstack" >> $GITHUB_OUTPUT
            echo "Deploying fullstack"
          else 
            comp=`jq '.[] | .componentName' component.json | grep -i "\<${{ inputs.component }}\>" -m1`
            lowercomp=${comp,,}
            if [[ $lowercomp == "\"${lower}\"" ]]; then
              echo "Deploying `cat ./component.json | grep -iF -o "${{ inputs.component }}" -m1`"
              echo "component=`cat ./component.json | grep -iF -o "${{ inputs.component }}" -m1`" >> $GITHUB_OUTPUT
            else
              echo "Error: Component '${{ inputs.component }}' not found in component.json"
              exit 1
            fi
          fi
          
  create-environment-matrix:
    needs: check-component-input
    runs-on: ubuntu-latest
    outputs:
        env: ${{ steps.env-matrix.outputs.env }}
    steps:
      - name: checkout code
        uses: actions/checkout@v4  
      - name: get environment input and created matrix
        id: env-matrix
        shell: bash
        run: |
          #Trim the spaces from target environment input.
          input_envs=$(echo "${{ inputs.target_environment }}" | tr -d '[:blank:]')

          if [[ "${{ inputs.environment }}" == "prod" ]]; then
                 #Output all environments
            if [[ "$input_envs" == "All" ]]; then
              echo "env=`cat ./client-manifests/${{ inputs.environment }}-clients.json | jq -c`" >> $GITHUB_OUTPUT
            else
              #Prepare the Environment Json
              deploy_envs="["

              #Convert the input into an array if there are multiple environments
              IFS=',' read -ra ENV_ARRAY <<< "$input_envs"
              for env in "${ENV_ARRAY[@]}"; do
                matching_env=$(jq -c ".[] | select(.env == \"$env\")" ./client-manifests/${{ inputs.environment }}-clients.json)
             
                if [[ -z "$matching_env" ]]; then
                  echo "Error: No matching environment found for '$env' in ${{ inputs.environment }}-clients.json"
                  exit 1
                else
                  # Append the matching environment to the list
                  if [[ -z "$deploy_envs" || "$deploy_envs" == "[" ]]; then
                    deploy_envs="$deploy_envs$matching_env"
                  else
                    deploy_envs="$deploy_envs, $matching_env"
                  fi
                 fi
               done

               # Close the JSON array
               deploy_envs="$deploy_envs]"
               echo "env=$deploy_envs" >> $GITHUB_OUTPUT
              fi
            else
              # If environment is not prod, fetch all environment
              echo "env=`cat ./client-manifests/${{ inputs.environment }}-clients.json | jq -c`" >> $GITHUB_OUTPUT
             fi  
   
  
  set-environment-runner:
    runs-on: ubuntu-latest
    outputs:
      runner: ${{ steps.env-runner.outputs.runner }}
    steps:
      - name: set runner group
        id: env-runner
        run: |
          if [[ ${{ inputs.environment }} == "prod" ]]; then
            echo "runner=Prod" >> $GITHUB_OUTPUT
          else
            echo "runner=NonProd" >> $GITHUB_OUTPUT
          fi
  call-phase:
     needs: [check-component-input, create-environment-matrix]
     uses: ./.github/workflows/deploy-phase.yml
     with: 
      component: ${{ inputs.component }}
      environment: ${{ inputs.environment }}
      runner: ${{ inputs.runner }}
      
  report-job-status:
     needs: [check-component-input, create-environment-matrix, set-environment-runner, call-phase]
     runs-on: windows-latest
     outputs:
        Controller_Job_Status: ${{ steps.report-status.outputs.Controller-Job-Status }}
        Controller_Job1_Status: ${{ steps.report-status.outputs.controller-Job1-status }}
        Controller_Job2_Status: ${{ steps.report-status.outputs.controller-Job2-status }}
        Controller_Job3_Status: ${{ steps.report-status.outputs.controller-Job3-status }}
        
        #OverallPhaseJobStatus: ${{ steps.report-status.outputs.overall-phase-status }}
        OverallPhaseJobStatus: ${{ steps.report-status.outputs.OverallPhaseJobStatus }}
        Overall_Job_Status_phase1: ${{ steps.report-status.outputs.overall-job-status-phase1 }}
        Overall_Job_Status_phase2: ${{ steps.report-status.outputs.overall-job-status-phase2 }}
        Overall_Job_Status_phase3: ${{ steps.report-status.outputs.overall-job-status-phase3 }}
        
        ComponentJobStatus_for_Phase1: ${{ steps.report-status.outputs.comp-status-phase1 }}
        ComponentJobStatus_for_Phase1_job1: ${{ steps.report-status.outputs.comp-status-phase1-job1 }}
        ComponentJobStatus_for_Phase1_job2: ${{ steps.report-status.outputs.comp-status-phase1-job2 }}
        
        ComponentJobStatus_for_Phase2: ${{ steps.report-status.outputs.comp-status-phase2 }}
        ComponentJobStatus_for_Phase2_job1: ${{ steps.report-status.outputs.comp-status-phase2-job1 }}
        ComponentJobStatus_for_Phase2_job2: ${{ steps.report-status.outputs.comp-status-phase2-job2 }}
        
        ComponentJobStatus_for_Phase3: ${{ steps.report-status.outputs.comp-status-phase3 }}
        ComponentJobStatus_for_Phase3_job1: ${{ steps.report-status.outputs.comp-status-phase3-job1 }}
        ComponentJobStatus_for_Phase3_job2: ${{ steps.report-status.outputs.comp-status-phase3-job2 }}
        
     steps:
       - name: Checkout repository
         uses: actions/checkout@v3

       # List files in the repository
       - name: List all files recursively
         run: ls -R

       - name: Report job statuses
         id: report-status
         shell: pwsh
         run: |
           .\.github\scripts\report-job-status.ps1 `
            -componentInputResult "${{ needs.check-component-input.result }}" `
            -environmentMatrixResult "${{ needs.create-environment-matrix.result }}" `
            -environmentRunnerResult "${{ needs.set-environment-runner.result }}" `
            -phaseStatus "${{ needs.call-phase.outputs.phase-status }}" `
            -compStatusPhase1 "${{ needs.call-phase.outputs.comp-status-phase1 }}" `
            -compStatusPhase2 "${{ needs.call-phase.outputs.comp-status-phase2 }}" `
            -compStatusPhase3 "${{ needs.call-phase.outputs.comp-status-phase3 }}" 
            
       #- name: Report job statuses
         #id: report-status
         #run: |
           #.\.github\scripts\report-job-status.ps1 ${{ needs.check-component-input.result }}  ${{ needs.create-environment-matrix.result }} ${{ needs.set-environment-runner.result }} ${{ needs.call-phase.outputs.phase-status }} ${{ needs.call-phase.outputs.comp-status-phase1 }} ${{ needs.call-phase.outputs.comp-status-phase2 }} ${{ needs.call-phase.outputs.comp-status-phase3 }}
           #./.github/scripts/report-job-status.ps1 '${{ needs.check-component-input.result }}' '${{ needs.create-environment-matrix.result }}' '${{ needs.set-environment-runner.result }}' '${{ needs.call-phase.outputs.phase-status }}' '${{ needs.call-phase.outputs.comp-status-phase1 }}' '${{ needs.call-phase.outputs.comp-status-phase2 }}' '${{ needs.call-phase.outputs.comp-status-phase3 }}'
         #shell: pwsh
           #ControllerJobStatus=""
           #ControllerJobStatus="job1 status: ${{ needs.check-component-input.result }}, "
           #ControllerJobStatus+="job2 status: ${{ needs.create-environment-matrix.result }}, "
           #ControllerJobStatus+="job3 status: ${{ needs.set-environment-runner.result }}"

           # Print job statuses with each status on a new line
           #echo "$ControllerJobStatus:"
           #echo "$ControllerJobStatus" | tr ',' '\n' | sed 's/^ *//;s/ *$//'
           #echo "::set-output name=Controller-Job-Status::$ControllerJobStatus"

            # set controllerjob1 status 
           #controller_Job1_status=$(echo "$ControllerJobStatus" | awk -F'job1 status: ' '{print "job1 status: " $2}' | awk -F', ' '{print $1}')
           #echo "::set-output name=controller-Job1-status::$controller_Job1_status"

           # set controllerjob2 status 
           #controller_Job2_status=$(echo "$ControllerJobStatus" | awk -F'job2 status: ' '{print "job2 status: " $2}' | awk -F', ' '{print $1}')
           #echo "::set-output name=controller-Job2-status::$controller_Job2_status"

           # set controllerjob3 status 
           #controller_Job3_status=$(echo "$ControllerJobStatus" | awk -F'job3 status: ' '{print "job3 status: " $2}' | awk -F', ' '{print $1}')
           #echo "::set-output name=controller-Job3-status::$controller_Job3_status"
           #********************
           # Initialize ControllerJobStatus
           #ControllerJobStatus="job1 status: ${{ needs.check-component-input.result }}, "
           #ControllerJobStatus+="job2 status: ${{ needs.create-environment-matrix.result }}, "
           #ControllerJobStatus+="job3 status: ${{ needs.set-environment-runner.result }}"

           # Print job statuses with each status on a new line
           #echo "$ControllerJobStatus:"
           #echo "::set-output name=Controller-Job-Status::$ControllerJobStatus"

           # Loop through the jobs and dynamically extract each status
           #for job in 1 2 3; do
           # Use awk to correctly extract the status for each job
           #job_status=$(echo "$ControllerJobStatus" | awk -v job="$job" -F"job$job status: " '{print $2}' | awk -F', ' '{print $1}')

           # Set the output for each job dynamically
           #echo "::set-output name=controller-Job$job-status::job$job status: $job_status"
           #done
           
           #phase_status="${{ needs.call-phase.outputs.phase-status }}"
           #echo "OverallPhaseJobStatus:"
           #echo "$phase_status"
           #echo "::set-output name=overall-phase-status::$phase_status"

            # Loop to set phase status for 1, 2, and 3
           #for phase in 1 2 3; do
             #phase_status_value=$(echo "$phase_status" | awk -F"phase $phase status: " '{print "phase $phase status: " $2}' | awk -F', ' '{print $1}')
             #echo "::set-output name=overall-job-status-phase$phase::$phase_status_value"
           #done
           #*******************************
           #for phase in 1 2 3; do
              # Use awk to dynamically extract the status for each phase
             #phase_status_value=$(echo "$phase_status" | awk -v phase="$phase" -F"phase $phase status: " '{print "phase " phase " status: " $2}' | awk -F', ' '{print $1}')
             #echo "::set-output name=overall-job-status-phase$phase::$phase_status_value"
           #done
           
           # set phase1 status 
           #phase1_status=$(echo "$phase_status" | awk -F'phase 1 status: ' '{print "phase 1 status: " $2}' | awk -F', ' '{print $1}')
           #echo "::set-output name=overall-job-status-phase1::$phase1_status"

           # set phase2 status 
           #phase2_status=$(echo "$phase_status" | awk -F'phase 2 status: ' '{print "phase 2 status: " $2}' | awk -F', ' '{print $1}')
           #echo "::set-output name=overall-job-status-phase2::$phase2_status"

           # set phase3 status
           #phase3_status=$(echo "$phase_status" | awk -F'phase 3 status: ' '{print "phase 3 status: " $2}' | awk -F', ' '{print $1}')
           #echo "::set-output name=overall-job-status-phase3::$phase3_status"
           #******************
           # Loop to handle component job status for all three phases
           #for phase in 1 2 3; do
            # Explicitly reference each phase instead of using dynamic interpolation
            #if [ $phase -eq 1 ]; then
              #comp_status="${{ needs.call-phase.outputs.comp-status-phase1 }}"
            #elif [ $phase -eq 2 ]; then
              #comp_status="${{ needs.call-phase.outputs.comp-status-phase2 }}"
            #elif [ $phase -eq 3 ]; then
              #comp_status="${{ needs.call-phase.outputs.comp-status-phase3 }}"
            #fi

           # Display component status for the current phase
           #echo "ComponentJobStatus-for-Phase$phase:"
           #echo "$comp_status"
           #echo "::set-output name=comp-status-phase$phase::$comp_status"

           # Check if comp_status is empty (i.e., the job was skipped)
           #if [ -z "$comp_status" ]; then
             #comp_status_job1="job1 status: skipped"
             #comp_status_job2="job2 status: skipped"
           #else
            # Extract job1 and job2 statuses from the component status using awk
           #comp_status_job1=$(echo "$comp_status" | awk -F'job1 status: ' '{print "job1 status: " $2}' | awk -F', ' '{print $1}' | sed 's/^ *//;s/ *$//' || echo "job1 status: not available")
           #comp_status_job2=$(echo "$comp_status" | awk -F'job2 status: ' '{print "job2 status: " $2}' | awk -F', ' '{print $1}' | sed 's/^ *//;s/ *$//' || echo "job2 status: not available")
           #fi

           # Output the job statuses for the current phase
           #echo "::set-output name=comp-status-phase$phase-job1::$comp_status_job1"
           #echo "::set-output name=comp-status-phase$phase-job2::$comp_status_job2"
           #done
           
           # Component job status for Phase 1 using grep
           #comp_status_phase1="${{ needs.call-phase.outputs.comp-status-phase1 }}"
           #echo "ComponentJobStatus-for-Phase1:"
           #echo "$comp_status_phase1"
           #echo "::set-output name=comp-status-phase1::$comp_status_phase1"

           # Check if comp_status_phase1 is empty (i.e., the job was skipped)
           #if [ -z "$comp_status_phase1" ]; then
           # If comp_status_phase1 is empty, mark job1 and job2 statuses as skipped or not available
             #comp_status_phase1_job1="job1 status: skipped"
             #comp_status_phase1_job2="job2 status: skipped"
           #else
             # For Job1
             #comp_status_phase1_job1=$(echo "$comp_status_phase1" | awk -F'job1 status: ' '{print "job1 status: " $2}' | awk -F', ' '{print $1}' | sed 's/^ *//;s/ *$//' || echo "job1 status: not available")

            # For Job2
             #comp_status_phase1_job2=$(echo "$comp_status_phase1" | awk -F'job2 status: ' '{print "job2 status: " $2}' | awk -F', ' '{print $1}' | sed 's/^ *//;s/ *$//' || echo "job2 status: not available")
           #fi

            # Output the statuses
           #echo "::set-output name=comp-status-phase1-job1::$comp_status_phase1_job1"
           #echo "::set-output name=comp-status-phase1-job2::$comp_status_phase1_job2"


            # Component job status for Phase 2 using grep
           #comp_status_phase2="${{ needs.call-phase.outputs.comp-status-phase2 }}"
           #echo "ComponentJobStatus-for-Phase2:"
           #echo "$comp_status_phase2"
           #echo "::set-output name=comp-status-phase2::$comp_status_phase2"

           # Check if comp_status_phase1 is empty (i.e., the job was skipped)
           #if [ -z "$comp_status_phase2" ]; then
           # If comp_status_phase2 is empty, mark job1 and job2 statuses as skipped or not available
             #comp_status_phase2_job1="job1 status: skipped"
             #comp_status_phase2_job2="job2 status: skipped"
           #else
             # For Job1
             #comp_status_phase2_job1=$(echo "$comp_status_phase2" | awk -F'job1 status: ' '{print "job1 status: " $2}' | awk -F', ' '{print $1}' | sed 's/^ *//;s/ *$//' || echo "job1 status: not available")

            # For Job2
             #comp_status_phase2_job2=$(echo "$comp_status_phase2" | awk -F'job2 status: ' '{print "job2 status: " $2}' | awk -F', ' '{print $1}' | sed 's/^ *//;s/ *$//' || echo "job2 status: not available")
           #fi

            # Output the statuses
           #echo "::set-output name=comp-status-phase2-job1::$comp_status_phase2_job1"
           #echo "::set-output name=comp-status-phase2-job2::$comp_status_phase2_job2"

            # Component job status for Phase 3 using grep
           #comp_status_phase3="${{ needs.call-phase.outputs.comp-status-phase3 }}"
           #echo "ComponentJobStatus-for-Phase3:"
           #echo "$comp_status_phase3"
           #echo "::set-output name=comp-status-phase3::$comp_status_phase3"

           # Check if comp_status_phase3 is empty (i.e., the job was skipped)
           #if [ -z "$comp_status_phase3" ]; then
           # If comp_status_phase3 is empty, mark job1 and job2 statuses as skipped or not available
             #comp_status_phase3_job1="job1 status: skipped"
             #comp_status_phase3_job2="job2 status: skipped"
           #else
             # For Job1
             #comp_status_phase3_job1=$(echo "$comp_status_phase3" | awk -F'job1 status: ' '{print "job1 status: " $2}' | awk -F', ' '{print $1}' | sed 's/^ *//;s/ *$//' || echo "job1 status: not available")

            # For Job2
             #comp_status_phase3_job2=$(echo "$comp_status_phase3" | awk -F'job2 status: ' '{print "job2 status: " $2}' | awk -F', ' '{print $1}' | sed 's/^ *//;s/ *$//' || echo "job2 status: not available")
           #fi

            # Output the statuses
           #echo "::set-output name=comp-status-phase3-job1::$comp_status_phase3_job1"
           #echo "::set-output name=comp-status-phase3-job2::$comp_status_phase3_job2"

  next-job:
    needs: report-job-status
    runs-on: ubuntu-latest
    steps:
      - name: Use the outputs from report-job-status
        run: |
          echo "ControllerJobStatus:"
          echo "${{ needs.report-job-status.outputs.Controller_Job_Status }}"
          echo "ControllerJob1Status:"
          echo "${{ needs.report-job-status.outputs.Controller_Job1_Status }}"
          echo "ControllerJob2Status:"
          echo "${{ needs.report-job-status.outputs.Controller_Job2_Status }}"
          echo "ControllerJob3Status:"
          echo "${{ needs.report-job-status.outputs.Controller_Job3_Status }}"
          echo "OverallPhaseJobStatus:"
          echo "${{ needs.report-job-status.outputs.OverallPhaseJobStatus }}"
          echo "Overall_Job_Status_phase1:"
          echo "${{ needs.report-job-status.outputs.Overall_Job_Status_phase1 }}"
          echo "Overall_Job_Status_phase2:"
          echo "${{ needs.report-job-status.outputs.Overall_Job_Status_phase2 }}"
          echo "Overall_Job_Status_phase3:"
          echo "${{ needs.report-job-status.outputs.Overall_Job_Status_phase3 }}"
          
          echo "ComponentJobStatus-for-Phase1:"
          echo "${{ needs.report-job-status.outputs.ComponentJobStatus_for_Phase1 }}"
          echo "ComponentJobStatus-for-Phase1-job1:"
          echo "${{ needs.report-job-status.outputs.ComponentJobStatus_for_Phase1_job1 }}"
          echo "ComponentJobStatus-for-Phase1-job2:"
          echo "${{ needs.report-job-status.outputs.ComponentJobStatus_for_Phase1_job2 }}"
          
          echo "ComponentJobStatus-for-Phase2:"
          echo "${{ needs.report-job-status.outputs.ComponentJobStatus_for_Phase2 }}"
          echo "ComponentJobStatus-for-Phase2-job1:"
          echo "${{ needs.report-job-status.outputs.ComponentJobStatus_for_Phase2_job1 }}"
          echo "ComponentJobStatus-for-Phase2-job2:"
          echo "${{ needs.report-job-status.outputs.ComponentJobStatus_for_Phase2_job2 }}"
    
          echo "ComponentJobStatus-for-Phase3:"
          echo "${{ needs.report-job-status.outputs.ComponentJobStatus_for_Phase3 }}"
          echo "ComponentJobStatus-for-Phase3-job1:"
          echo "${{ needs.report-job-status.outputs.ComponentJobStatus_for_Phase3_job1 }}"
          echo "ComponentJobStatus-for-Phase3-job2:"
          echo "${{ needs.report-job-status.outputs.ComponentJobStatus_for_Phase3_job2 }}"
  
