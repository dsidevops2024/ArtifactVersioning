name: DivyaTargetEnv Workflow
 
on:
  workflow_dispatch:
    inputs:
      component:
        description: 'Input the component to deploy full stack?'
        required: true
        type: string
      environment:
        description: 'Choose env to deploy (Dev or Prod)?'
        required: true
        type: choice
        options:
          - dev
          - prod
      prod_sub_env:
        description: 'Specify the client(s) you want to deploy (comma-separated for multiple environments, "all" for all environments)?'
        required: false
        type: string
        default: 'all'
 
jobs:
  create-environment-matrix:
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.env-matrix.outputs.env }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
 
      - name: Get environment input and create matrix
        id: env-matrix
        shell: bash
        run: |
          if [[ "${{ inputs.environment }}" == "prod" ]]; then
            if [[ "${{ inputs.prod_sub_env }}" == "all" ]]; then
              echo "env=cat ./client-manifests/${{ inputs.environment }}-clients.json | jq -c ." >> $GITHUB_OUTPUT
            else
              selected_envs="${{ inputs.prod_sub_env }}"
               envs_to_deploy="["
              IFS=',' read -ra ENV_ARRAY <<< "$selected_envs"
              for env in "${ENV_ARRAY[@]}"; do
                matching_env=$(jq -c ".[] | select(.env == \"$env\")" ./client-manifests/${{ inputs.environment }}-clients.json)
                if [[ -z "$matching_env" ]]; then
                  echo "Error: No matching environment found for '$env' in '${{ inputs.environment }}'"
                  exit 1
                else
                  if [[ -z "$envs_to_deploy" || "$envs_to_deploy" == "[" ]]; then
                    envs_to_deploy="$envs_to_deploy$matching_env"
                  else
                    envs_to_deploy="$envs_to_deploy, $matching_env"
                  fi
                fi
              done
              envs_to_deploy="$envs_to_deploy]"
              echo "env=$envs_to_deploy" >> $GITHUB_OUTPUT
            fi
          else
            echo "env=cat ./client-manifests/${{ inputs.environment }}-clients.json | jq -c ." >> $GITHUB_OUTPUT
          fi
      - name: Print the selected environment
        run: |
          echo "Selected environment: ${{ steps.env-matrix.outputs.env }}"
