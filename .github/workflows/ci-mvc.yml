name: ci-mvc

on:
  push:
    paths:
      - ".github/workflows/ci-mvc.yml"
      - "mvc/**"

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
       partial_json: ${{ steps.calculate.outputs.partial_json }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Build with Maven
        #shell: powershell
        shell: bash
        run: |
           #$mavenPath = "C:\Program Files\Apache\Maven\apache-maven-3.9.11\bin"
           #$env:Path += ";$mavenPath"
           #mvn -version
           mvn clean install

      #- name: Build with Maven check24
        #run: |
           #$env:Path += ";C:\Program Files\GitHub CLI"
           #mvn clean install

      - name: Run tests
        shell: bash
        run: |
          #$mavenPath = "C:\Program Files\Apache\Maven\apache-maven-3.9.11\bin"
          #$env:Path += ";$mavenPath"
          mvn test

      - name: Calculate Versions and Changed Components
        if: github.ref == 'refs/heads/main'
        id: calculate
        uses: ./.github/actions/semversion-calculation
        #uses: ./.github/actions/version-bump
        with:
          github-token: ${{ secrets.AVPAT_TOKEN }}
          json-versions: ${{ vars.JSON_VERSIONS }}
          
      - name: Use calculated versions
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Updated Version JSON:"
          echo '${{ steps.calculate.outputs.version_json }}' | jq
          echo "Changed Components: ${{ steps.calculate.outputs.components }}"
          
      - name: Determine REPO_PATH
        id: repo_path
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"

          if [[ "$BRANCH_NAME" == "main" ]]; then
            RAW_JSON='${{ steps.calculate.outputs.version_json }}'
            # Detect if 'mvc' is an object or string
            VALUE_TYPE=$(echo "$RAW_JSON" | jq -r 'with_entries(.key |= ascii_downcase) | .mvc | type')

            if [[ "$VALUE_TYPE" == "string" ]]; then
              VERSION=$(echo "$RAW_JSON" | jq -r 'with_entries(.key |= ascii_downcase) | .mvc')
            elif [[ "$VALUE_TYPE" == "object" ]]; then
              VERSION=$(echo "$RAW_JSON" | jq -r 'with_entries(.key |= ascii_downcase) | .mvc.sphereboard')
            else
              echo "‚ùå Unsupported type for 'mvc': $VALUE_TYPE"
              exit 1
            fi
            #VERSION=$(echo '${{ steps.calculate.outputs.version_json }}' | jq -r '.mvc')
            #VERSION=$(jq -r 'with_entries(.key |= ascii_downcase) | .mvc' <<< '${{ steps.calculate.outputs.version_json }}')
            #VERSION=$(echo '${{ steps.calculate.outputs.version_json }}' | jq -r 'with_entries(.key |= ascii_downcase) | .mvc.sphereboard')


            if [[ -z "$VERSION" || "$VERSION" == "null" ]]; then
              echo "‚ùå MVC version missing or invalid."
              exit 1
            fi

            REPO_PATH="sb-dev-generic-local/main/mvc/$VERSION"
            echo "‚úÖ Main branch build: version=$VERSION"
          else
            REPO_PATH="sb-dev-generic-local/$BRANCH_NAME/mvc"
            echo "üü° Non-main branch build: version not used"
          fi

          echo "REPO_PATH=$REPO_PATH" >> $GITHUB_ENV
          echo "REPO_PATH=$REPO_PATH"

      - name: Push artifact to the Artifactory
        run: |
          echo "Pushing artifact to Artifactory..."
          echo "Repo path: $REPO_PATH"
          #echo "Repo path: $env:REPO_PATH"
          # Add actual curl or deploy command here

  update-json:
    needs: build
    if: github.ref == 'refs/heads/main'
    concurrency:
      group: version-update
      cancel-in-progress: false
    runs-on: ubuntu-latest
    steps:
      - name: Update version
        uses: ./.github/actions/update-json-variable
        with:
          updated_json: ${{ needs.build.outputs.partial_json }}

      #- name: Update JSON_VERSIONS GitHub org variable (main only)
        #if: github.ref == 'refs/heads/main'
        #run: |
          #EXISTING=$(gh variable get JSON_VERSIONS --org dsidevops2024 --json value -q .value)
          #echo "$EXISTING" > existing.json
          
          #VERSION=$(echo '${{ steps.calculate.outputs.version_json }}' | jq -r 'with_entries(.key |= ascii_downcase) | .mvc.sphereboard')
          
          #Added new lines
          # ‚úÖ Construct the nested update JSON properly
          #jq -n --arg v "$VERSION" '{mvc: {sphereboard: $v}}' > update.json
          #echo "{\"mvc\":\"$VERSION\"}" > update.json

          #MERGED=$(jq -s '.[0] * .[1]' existing.json update.json)

          #echo "‚úÖ Merged version JSON: $MERGED"
          #gh variable set JSON_VERSIONS --body "$MERGED" --org dsidevops2024 --visibility all
        #env:
          #GH_TOKEN: ${{ secrets.AVPAT_TOKEN }}
