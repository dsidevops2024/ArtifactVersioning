name: Semantic-PRLabel-Handler

on:
  workflow_call:
    inputs:
      json_versions:
        description: "The current versions JSON string"
        required: true
        type: string
    outputs:
      updated_json:
        description: "Updated JSON with bumped versions"
        value: ${{ jobs.bump-json-version.outputs.updated_json }}

jobs:
  bump-json-version:
    runs-on: ubuntu-latest
    outputs:
      updated_json: ${{ steps.bump_json.outputs.updated_json }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files between main and PR head
        #if: ${{ !inputs.components }}
        id: changes
        run: |
          git fetch origin ${{ github.event.pull_request.head.ref }}
          MERGE_BASE=$(git merge-base origin/main origin/${{ github.event.pull_request.head.ref }})
          FILES=$(git diff --name-only "$MERGE_BASE" origin/${{ github.event.pull_request.head.ref }})

          echo "$FILES"
          {
            echo 'files<<EOF'
            echo "$FILES"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      #- name: Extract changed components
        #if: ${{ !inputs.components }}
        #id: components
        #run: |    
          #FILES="${{ steps.changes.outputs.files }}"
          #COMPONENTS_FROM_YML=$(echo "$FILES" | grep -oP 'ci-\K[^.]+(?=\.yml)' || true)
          #COMPONENTS_FROM_DIR=$(echo "$FILES" | awk -F/ '$1 != ".github" { print $1 }' | sort -u || true)

          #COMPONENTS=$(echo -e "$COMPONENTS_FROM_YML\n$COMPONENTS_FROM_DIR" | sort -u | tr '\n' ' ')
          #COMPONENTS=$(echo "$FILES" | grep -oP 'ci-\K[^.]+(?=\.yml)' | sort -u | tr '\n' ' ')
          #if [[ -z "$COMPONENTS" ]]; then
            #echo "No components changed. Exiting."
            #exit 1
          #fi
          
          #echo "‚úÖ Detected components: $COMPONENTS"
          # Outputs
          #echo "components=$COMPONENTS" >> "$GITHUB_OUTPUT"
          
      - name: Extract changed components
        #if: ${{ !inputs.components }}
        id: components
        shell: bash
        run: |
          FILES="${{ steps.changes.outputs.files }}"
          COMPONENTS_FROM_YML=$(echo "$FILES" | grep -oP 'ci-\K[^.]+(?=\.yml)' || true)
          COMPONENTS_FROM_DIR=$(echo "$FILES" | awk -F/ '$1 != ".github" { print $1 }' | sort -u || true)
          COMPONENTS_FROM_DIR=$(echo "$FILES" | awk -F/ '$1 != ".github" && $1 != "backend" { print $1 }' | sort -u || true)

          COMPONENTS=$(echo -e "$COMPONENTS_FROM_YML\n$COMPONENTS_FROM_DIR" | sort -u | tr '\n' ' ')

          # --- New logic: extract backend components from backend-components.json ---
          BACKEND_FILES=$(echo "$FILES" | grep '^backend/' || true)

          if [ -n "$BACKEND_FILES" ]; then
            COMPONENTS_JSON="backend/backend-components.json"

          # Validate JSON
            if ! jq empty "$COMPONENTS_JSON"; then
              echo "‚ùå Invalid JSON in $COMPONENTS_JSON"
              exit 1
            fi

            declare -A MATCHED_BACKEND_COMPONENTS=()

            while IFS= read -r file; do
              echo "üîç Analyzing backend file: $file"

              TITLES=$(jq -r '.[].title' "$COMPONENTS_JSON")

              for title in $TITLES; do
                if [[ "$file" == *"$title"* ]]; then
                  echo "‚úÖ Matched component title '$title' in file path"
                  MATCHED_BACKEND_COMPONENTS["$title"]=1
                fi
              done
            done <<< "$FILES"

            # Join all matched titles
            BACKEND_COMPONENTS=$(printf "%s\n" "${!MATCHED_BACKEND_COMPONENTS[@]}" | sort -u | tr '\n' ' ')
            echo "üì¶ Matched backend components: $BACKEND_COMPONENTS"

            # Append backend components to overall list
            if [ -n "$BACKEND_COMPONENTS" ]; then
              COMPONENTS="$COMPONENTS $BACKEND_COMPONENTS"
            fi
          fi

          # Final cleanup and deduplication
          COMPONENTS=$(echo "$COMPONENTS" | xargs -n1 | sort -u | tr '\n' ' ')

          if [[ -z "$COMPONENTS" ]]; then
            echo "‚ö†Ô∏è No components changed. Exiting."
            exit 1
          fi

          echo "‚úÖ Detected components: $COMPONENTS"
          echo "components=$COMPONENTS" >> "$GITHUB_OUTPUT"
                  
      - name: Parse bump type from PR labels
        if: github.event_name == 'pull_request'
        id: bump
        #env:
           #LABELS_JSON: ${{ toJson(github.event.pull_request.labels) }}
        run: |
         echo "Extracting labels..."
         LABELS_JSON='${{ toJson(github.event.pull_request.labels) }}'
         echo "$LABELS_JSON"

         LABELS=$(jq -r '.[].name' <<< "$LABELS_JSON")
         echo "Labels found: $LABELS"

          TYPE=""
          if echo "$LABELS" | grep -q "semver:major"; then
            TYPE="major"
          elif echo "$LABELS" | grep -q "semver:minor"; then
            TYPE="minor"
          elif echo "$LABELS" | grep -q "semver:patch"; then
            TYPE="patch"
          else
            echo "‚ùå No valid semver label (semver:major|minor|patch) found."
            exit 1
          fi

          echo "‚úÖ Bump type: $TYPE"
          echo "type=$TYPE" >> "$GITHUB_OUTPUT"
       
      - name: Bump version in JSON
        id: bump_json
        run: |
          COMPONENTS="${{ steps.components.outputs.components }}"
          BUMP_TYPE="${{ steps.bump.outputs.type }}"
          echo '${{ inputs.json_versions }}' > versions.json
          jq '.' versions.json > tmp.json

          for COMP in $COMPONENTS; do
            CURRENT=$(jq -r --arg c "$COMP" '.[$c]' tmp.json)
            if [ "$CURRENT" == "null" ]; then
              echo "Component $COMP not found. Skipping."
              continue
            fi

            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"

            case "$BUMP_TYPE" in
              major) ((MAJOR+=1)); MINOR=0; PATCH=0 ;;
              minor) ((MINOR+=1)); PATCH=0 ;;
              patch) ((PATCH+=1)) ;;
            esac

            NEW="$MAJOR.$MINOR.$PATCH"
            echo "üîß $COMP bumped to $NEW"
            tmpfile=$(mktemp)
            jq --arg c "$COMP" --arg v "$NEW" '.[$c]=$v' tmp.json > "$tmpfile" && mv "$tmpfile" tmp.json
          done

          FINAL_JSON=$(jq -c . < tmp.json)
          echo "‚úÖ Final bumped JSON: $FINAL_JSON"
          echo "updated_json=$FINAL_JSON" >> "$GITHUB_OUTPUT"
