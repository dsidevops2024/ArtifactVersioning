name: Semantic-PRLabel-Handler

on:
  workflow_call:
    inputs:
      json_versions:
        description: "The current versions JSON string"
        required: true
        type: string
      components:
        description: "List of changed components (space-separated)"
        required: false
        type: string
    outputs:
      updated_json:
        description: "Updated JSON with bumped versions"
        value: ${{ jobs.bump-json-version.outputs.updated_json }}

jobs:
  bump-json-version:
    runs-on: ubuntu-latest
    outputs:
      updated_json: ${{ steps.bump_json.outputs.updated_json }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files between main and PR head
        if: ${{ !inputs.components }}
        id: changes
        run: |
          git fetch origin ${{ github.event.pull_request.head.ref }}
          MERGE_BASE=$(git merge-base origin/main origin/${{ github.event.pull_request.head.ref }})
          FILES=$(git diff --name-only "$MERGE_BASE" origin/${{ github.event.pull_request.head.ref }})

          echo "$FILES"
          {
            echo 'files<<EOF'
            echo "$FILES"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Extract changed components
        if: ${{ !inputs.components }}
        id: components
        run: |    
          FILES="${{ steps.changes.outputs.files }}"
          COMPONENTS_FROM_YML=$(echo "$FILES" | grep -oP 'ci-\K[^.]+(?=\.yml)' || true)
          COMPONENTS_FROM_DIR=$(echo "$FILES" | awk -F/ '$1 != ".github" { print $1 }' | sort -u || true)

          COMPONENTS=$(echo -e "$COMPONENTS_FROM_YML\n$COMPONENTS_FROM_DIR" | sort -u | tr '\n' ' ')
          #COMPONENTS=$(echo "$FILES" | grep -oP 'ci-\K[^.]+(?=\.yml)' | sort -u | tr '\n' ' ')
          if [[ -z "$COMPONENTS" ]]; then
            echo "No components changed. Exiting."
            exit 1
          fi

          # Prepare JSON output by looking up in backend/backend-components.json
          JSON_COMPONENTS=""
             for title in $COMPONENTS; do
                jq_match=$(jq -c "map(select(.title==\"${title}\")) | first" backend/backend-components.json)
                if [[ "$jq_match" != "null" && -n "$jq_match" ]]; then
                  JSON_COMPONENTS="${JSON_COMPONENTS}${jq_match},"
                else
                  echo "Warning: No match for component '$title' in backend-components.json"
                fi
              done

             # Finalize JSON array and deduplicate
             JSON_COMPONENTS="[${JSON_COMPONENTS%,}]"
             JSON_COMPONENTS=$(echo "$JSON_COMPONENTS" | jq -c 'unique_by(.title)')
          
             echo "✅ Detected components: $COMPONENTS"
             echo "✅ JSON components: $JSON_COMPONENTS"

             # Outputs
             echo "components=$COMPONENTS" >> "$GITHUB_OUTPUT"
             echo "components_json=$JSON_COMPONENTS" >> "$GITHUB_OUTPUT"
           
      - name: Parse bump type from PR labels
        if: github.event_name == 'pull_request'
        id: bump
        #env:
           #LABELS_JSON: ${{ toJson(github.event.pull_request.labels) }}
        run: |
         echo "Extracting labels..."
         LABELS_JSON='${{ toJson(github.event.pull_request.labels) }}'
         echo "$LABELS_JSON"

         LABELS=$(jq -r '.[].name' <<< "$LABELS_JSON")
         echo "Labels found: $LABELS"

          TYPE=""
          if echo "$LABELS" | grep -q "semver:major"; then
            TYPE="major"
          elif echo "$LABELS" | grep -q "semver:minor"; then
            TYPE="minor"
          elif echo "$LABELS" | grep -q "semver:patch"; then
            TYPE="patch"
          else
            echo "❌ No valid semver label (semver:major|minor|patch) found."
            exit 1
          fi

          echo "✅ Bump type: $TYPE"
          echo "type=$TYPE" >> "$GITHUB_OUTPUT"
       
      - name: Bump version in JSON
        id: bump_json
        run: |
          COMPONENTS="${{ steps.components.outputs.components }}"
          BUMP_TYPE="${{ steps.bump.outputs.type }}"
          echo '${{ inputs.json_versions }}' > versions.json
          jq '.' versions.json > tmp.json

          for COMP in $COMPONENTS; do
            CURRENT=$(jq -r --arg c "$COMP" '.[$c]' tmp.json)
            if [ "$CURRENT" == "null" ]; then
              echo "Component $COMP not found. Skipping."
              continue
            fi

            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"

            case "$BUMP_TYPE" in
              major) ((MAJOR+=1)); MINOR=0; PATCH=0 ;;
              minor) ((MINOR+=1)); PATCH=0 ;;
              patch) ((PATCH+=1)) ;;
            esac

            NEW="$MAJOR.$MINOR.$PATCH"
            echo "🔧 $COMP bumped to $NEW"
            tmpfile=$(mktemp)
            jq --arg c "$COMP" --arg v "$NEW" '.[$c]=$v' tmp.json > "$tmpfile" && mv "$tmpfile" tmp.json
          done

          FINAL_JSON=$(jq -c . < tmp.json)
          echo "✅ Final bumped JSON: $FINAL_JSON"
          echo "updated_json=$FINAL_JSON" >> "$GITHUB_OUTPUT"
