name: Build-workflow
on:
  #workflow_dispatch:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}      
    
      - name: Settting up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '18'
          distribution: 'temurin'
          cache: maven

      - name: Build with new Maven
        run: mvn -B package --file pom.xml
      #checking PR checklists-new3
      - name: Creates stagin directory and copy .war
        run: |
          mkdir staging
          cp target/*.war staging/
          
       #Checking Dev commits 2nd attempt(PR labels)
      - name: Get current component version
        run: |
          echo '${{ vars.COMPONENT_VERSIONS }}' > versions.json
          cat versions.json

      #- name: Get latest commit message-check
        #id: commit
        #run: |
          #COMMIT_MSG=$(git log -1 --pretty=%B)
          #echo "Commit message: $COMMIT_MSG"
          #echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          #echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
          #echo "EOF" >> $GITHUB_OUTPUT
          #echo "Commit message: $COMMIT_MSG"
          #echo "commit_message=$COMMIT_MSG" >> $GITHUB_OUTPUT

      #- name: Get developer commit messages from PR
        #id: devcommits
        #run: |
         #echo "Getting developer commit messages introduced in PR..."
         #COMMIT_MSGS=$(git log --pretty=%B ${{ github.event.before }}..${{ github.sha }})
         #echo "$COMMIT_MSGS"
         # Optional: Only get the first non-merge commit message
         #COMMIT_MSG=$(echo "$COMMIT_MSGS" | grep -v "^Merge pull request" | head -n 1)
         #echo "Developer commit: $COMMIT_MSG"
         #echo "commit_message<<EOF" >> $GITHUB_OUTPUT
         #echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
         #echo "EOF" >> $GITHUB_OUTPUT 

      - name: Get developer commit messages from PRs
        id: devcommits
        run: |
         echo "Getting developer commit messages introduced in PR..." 
         echo "Getting commit message from merge body..."
         COMMIT_MSG=$(git log -1 --pretty=%B)
  
         # Remove merge line and blank lines
         CLEAN_MSG=$(echo "$COMMIT_MSG" | sed '/^Merge pull request/d' | sed '/^\s*$/d' | head -n 1)
  
         echo "Developer commit: $CLEAN_MSG"
  
         echo "commit_message<<EOF" >> $GITHUB_OUTPUT
         echo "$CLEAN_MSG" >> $GITHUB_OUTPUT
         echo "EOF" >> $GITHUB_OUTPUT 
 
      #checking developer commits
      #- name: Get developer commit message (not merge commit)
        #id: devcommits
        #run: |
          #echo "Fetching developer commit message..."

          # Get the latest commit not authored by 'GitHub' (merge commits usually are)
          #COMMIT_MSG=$(git log --no-merges --pretty=%B -n 1)

          #echo "Developer commit: $COMMIT_MSG"

          # Write to GitHub output (safe multiline syntax)
          #DELIM="EOF$(date +%s%N)"
          #echo "commit_message<<$DELIM" >> $GITHUB_OUTPUT
          #echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
          #echo "$DELIM" >> $GITHUB_OUTPUT

      - name: Determine affected component and bump version
        id: bump
        run: |
          echo "Parsing commit message..."
          COMMIT_MSG="${{ steps.devcommits.outputs.commit_message }}"

          # Extract scope (e.g., mvc, dacpac)
          COMPONENT=$(echo "$COMMIT_MSG" | sed -nE 's/^(feat|fix|chore|perf|refactor|style|test|docs)\(([^)]+)\):.*/\2/p')

          if [ -z "$COMPONENT" ]; then
            echo "No component scope found in commit message."
            exit 0
          fi

          echo "Component: $COMPONENT"

          # Extract existing version
          VERSION=$(jq -r --arg key "$COMPONENT" '.[$key]' versions.json)

          if [ "$VERSION" == "null" ]; then
            echo "Component '$COMPONENT' not found in versions.json"
            exit 1
          fi

          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)

          # Determine bump
          if echo "$COMMIT_MSG" | grep -q -i "BREAKING CHANGE"; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif echo "$COMMIT_MSG" | grep -q "^feat"; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif echo "$COMMIT_MSG" | grep -q "^fix"; then
            PATCH=$((PATCH + 1))
          else
            echo "No bump needed."
            exit 0
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version for $COMPONENT: $NEW_VERSION"

          # Save outputs
          echo "component=$COMPONENT" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Merge and update COMPONENT_VERSIONS
        if: steps.bump.outputs.new_version != ''
        run: |
          echo "Updating COMPONENT_VERSIONS..."
          echo '${{ vars.COMPONENT_VERSIONS }}' > current.json
          echo "{\"${{ steps.bump.outputs.component }}\":\"${{ steps.bump.outputs.new_version }}\"}" > update.json

          jq -s '.[0] * .[1]' current.json update.json > merged.json
          cat merged.json

          gh variable set COMPONENT_VERSIONS --body "$(cat merged.json)" --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}    
