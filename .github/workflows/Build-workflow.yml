name: Build-workflow
on:
  #workflow_dispatch:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}      
    
      - name: Settting up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '18'
          distribution: 'temurin'
          cache: maven

      - name: Build with new Maven-checking
        run: mvn -B package --file pom.xml
    
      - name: Creates stagin directory and copy .war -checking
        run: |
          mkdir staging
          cp target/*.war staging/
          
      - name: Get current component version
        run: |
          echo '${{ vars.JSON_VERSIONS }}' > versions.json
          cat versions.json
          
      - name: Fetch full git history - checking
        run: git fetch origin main
        
      - name: Determine per-component version bumps from all commits
        id: bump_components
        shell: pwsh
        run: |
          # Get commit messages from PR (range from main to HEAD)
          $commits = git log origin/main..HEAD --pretty=format:"%s"

          Write-Host "Collected commit messages:"
          foreach ($commit in $commits) {
            Write-Host "- $commit"
          }
          
          # Define priorities
          $priority = @{
            "patch" = 0
            "minor" = 1
            "major" = 2
          }

          $bumpKeywords = @{
            "fix" = "patch"
            "feat" = "minor"
            "breakingchange" = "major"
            "BREAKING CHANGE" = "major"
          }

          $componentBumps = @{}

          foreach ($commit in $commits) {
            if ($commit -match "^(?<type>\w+)\((?<component>[^)]+)\):") {
              $type = $matches['type'].ToLower()
              $component = $matches['component'].ToLower()
              if ($bumpKeywords.ContainsKey($type)) {
                $bump = $bumpKeywords[$type]
                if ($componentBumps.ContainsKey($component)) {
                  if ($priority[$bump] -gt $priority[$componentBumps[$component]]) {
                    $componentBumps[$component] = $bump
                  }
                } else {
                  $componentBumps[$component] = $bump
                }
              }
            } elseif ($commit -match "BREAKING CHANGE.*\((?<component>[^)]+)\)") {
              $component = $matches['component'].ToLower()
              $componentBumps[$component] = "major"
            }
          }

          # Load versions.json
          $versions = Get-Content versions.json | ConvertFrom-Json

          $updates = @{}

          foreach ($component in $componentBumps.Keys) {
            $currentVersion = $versions[$component]
            if (-not $currentVersion) {
              Write-Host "Component $component not found in versions.json"
              continue
            }

            $parts = $currentVersion -split '\.'
            $major = [int]$parts[0]
            $minor = [int]$parts[1]
            $patch = [int]$parts[2]

            switch ($componentBumps[$component]) {
              "major" {
                $major += 1; $minor = 0; $patch = 0
              }
              "minor" {
                $minor += 1; $patch = 0
              }
              "patch" {
                $patch += 1
              }
            }

            $newVersion = "$major.$minor.$patch"
            $versions[$component] = $newVersion
            $updates[$component] = $newVersion
          }

          # Save updated versions
          $versions | ConvertTo-Json -Depth 10 | Set-Content versions.json

          # Output updates for next step
          $updates | ConvertTo-Json -Compress | Out-File -FilePath updated_versions.json


      - name: Merge and update JSON_VERSIONS
        run: |
          echo "Updating JSON_VERSIONS..."
          echo '${{ vars.JSON_VERSIONS }}' > current.json
          cat updated_versions.json > update.json
          jq -s '.[0] * .[1]' current.json update.json > merged.json
          cat merged.json

          gh variable set JSON_VERSIONS --body "$(cat merged.json)" --repo ${{ github.repository }}
        env:
         GH_TOKEN: ${{ secrets.PAT_TOKEN }}
 
