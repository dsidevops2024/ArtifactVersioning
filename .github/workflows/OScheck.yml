name: OScheck
on:
  push:
    
jobs:
  job1:
    #runs-on: self-hosted
    #runs-on: [win-runner]
    runs-on: [window-test]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Add dotnet to PATH
        run: echo "C:\Program Files\dotnet" | Out-File -Append -FilePath $env:GITHUB_PATH
        shell: powershell

      - name: Generate coverage report
        run: |
          # Check if the report generator tool is already installed
          $toolList = dotnet tool list --global
          $toolInstalled = $toolList -match "dotnet-reportgenerator-globaltool"

          if (-not $toolInstalled) {
            # Tool is not installed, install it
            Write-Host "Installing dotnet-reportgenerator-globaltool."
            dotnet tool install --global dotnet-reportgenerator-globaltool
          } else {
            Write-Host "dotnet-reportgenerator-globaltool is already installed."
          }

          # Find the installation directory of dotnet tools
          $dotnetToolsPath = [System.IO.Path]::Combine($env:USERPROFILE, '.dotnet', 'tools')
    
          # Ensure the tool is in the expected tools path
          if (Test-Path $dotnetToolsPath) {
            Write-Host "Global tools are installed at: $dotnetToolsPath"
          } else {
            Write-Host "Failed to determine global tools installation directory."
          }
    
          # Check for reportgenerator.exe in the tools path
          $reportGeneratorPath = [System.IO.Path]::Combine($dotnetToolsPath, 'reportgenerator.exe')
    
          if (Test-Path $reportGeneratorPath) {
            Write-Host "The report generator tool is located at: $reportGeneratorPath"
          } else {
            Write-Host "Report generator tool is not located at the expected path."
          }


      #- name: Checking and delete sb Directory
        #run: |
          # Extract repository name from the GitHub repository context
          #$folderName = "${{ vars.FOLDER_NAME }}"
          
          # Construct the folder path dynamically, using Join-Path for cross-platform compatibility
          #$folderpath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "${{ vars.FOLDER_NAME }}"
          
          # Construct the folder path dynamically using the repository name and folder name
          #$folderpath = "$env:GITHUB_WORKSPACE\$folderName"
          #echo "Folder Path: $folderpath"
        #shell: bash
        #shell: pwsh
      #- name: Checking and deleting sb Directory (Cross-platform)
        #shell: pwsh
        #run: |
           #$folderName = "${{ vars.FOLDER_NAME }}"
    
           #if ($IsWindows) {
              #$folderPath = "$env:GITHUB_WORKSPACE\$folderName"
           #} else {
              #$folderPath = "$env:GITHUB_WORKSPACE/$folderName"
           #}

           #Write-Host "Folder Path: $folderPath"

           #if (Test-Path $folderPath) {
             #Write-Host "Deleting folder: $folderPath"
             #Remove-Item -Recurse -Force $folderPath
           #} else {
             #Write-Host "Folder does not exist: $folderPath"
           #}
        
      #- name: Checking and delete sb Directory on Windows
        #if: runner.os == 'Windows'
        #shell: powershell
        #run: |
         #$folderName = "${{ vars.FOLDER_NAME }}"
         #$folderpath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "${{ vars.FOLDER_NAME }}"
         #$folderpath = "$env:GITHUB_WORKSPACE\$folderName"
         #Write-Host "Folder Path: $folderpath"

      #- name: Checking and delete sb Directory on Linux/macOS
        #if: runner.os != 'Windows'
        #shell: pwsh
        #run: |
          #$folderName = "${{ vars.FOLDER_NAME }}"
          #$folderpath = "$env:GITHUB_WORKSPACE/$folderName"
          #$folderpath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "${{ vars.FOLDER_NAME }}"
          #Write-Host "Folder Path: $folderpath"
          
      #- name: Checking and delete sb Directory
        #run: |
          #echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          #folderName="${{ vars.FOLDER_NAME }}"
          #folderpath="$GITHUB_WORKSPACE/$folderName"
          #echo "Folder Path: $folderpath"
          #shell: bash
      #- name: Checking and delete sb Directory
        #run: |
          # Extract repository name from the GitHub repository context
          #$repoOwner = "${{ github.repository_owner }}"
          #Write-Host "Repository Owner: $repoOwner"  
          #$repoName = "${{ github.repository }}" -split '/' | select -First 1
          #Write-Host "Repository Name: $repoName"
          # Get the folder name from the input or use the default
          #$folderName = "${{ inputs.folder-name }}"
          #$folderName = "${{ vars.FOLDER_NAME }}"
          # Construct the folder path dynamically, using Join-Path for cross-platform compatibility
          #$folderpath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "${{ vars.FOLDER_NAME }}"
          # Construct the folder path dynamically using the repository name and folder name
          #$folderpath = "$env:GITHUB_WORKSPACE\$repoName\$repoName\$folderName"
          #$folderpath = "$env:GITHUB_WORKSPACE\$folderName"
          
          #folderName="${{ vars.FOLDER_NAME }}"
          #folderpath="$GITHUB_WORKSPACE/${{ vars.FOLDER_NAME }}"
          #echo "Folder Path: $folderpath"
        #shell: bash
        #shell: pwsh
