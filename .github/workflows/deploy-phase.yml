name: Deploy Phase
on:
  workflow_call:
    inputs:
      component:
        type: string
        required: true
      environment:
        type: string
        required: true
      runner:
        type: string
        required: true
    outputs:
      phase-status:
        #value: ${{ jobs.phase-status.outputs.phaseop }}
        value: ${{ jobs.collect-status-new.outputs.phaseop }}
      comp-status-phase1:
        #value: ${{ jobs.Phase1.outputs.compstatus }}
        value: ${{ jobs.deploy-single-component.outputs.compstatus }}
      comp-status-phase2:
        #value: ${{ jobs.Phase2.outputs.compstatus }}
        value: ${{ jobs.deploy-phase-one.outputs.compstatus }}
      comp-status-phase3:
        #value: ${{ jobs.Phase3.outputs.compstatus }}
        value: ${{ jobs.deploy-phase-two.outputs.compstatus }}
        
jobs:
  check-approvals:
    runs-on: ubuntu-latest
    steps:
      - name: Approval step
        id: step2  # We add an ID for job2
        run: |
          echo "Approval-check=Test for approval" 
  deploy-single-component:
    if: ${{ ! contains(inputs.component, 'fullstack') }}
    uses: ./.github/workflows/deploy-component.yml
    with: 
      component: ${{ inputs.component }}
      environment: ${{ inputs.environment }}
      runner: ${{ inputs.runner }}

  
  #Phase2:
  deploy-phase-one:
    if: ${{  inputs.component == 'fullstack' }}
    uses: ./.github/workflows/deploy-component.yml
    with: 
      component: ${{ inputs.component }}
      environment: ${{ inputs.environment }}
      runner: ${{ inputs.runner }}

  #Phase3:
  deploy-phase-two:
    if: ${{  inputs.component == 'fullstack' }}
    needs: deploy-phase-one
    uses: ./.github/workflows/deploy-component.yml
    with: 
      component: ${{ inputs.component }}
      environment: ${{ inputs.environment }}
      runner: ${{ inputs.runner }}
      
  #phase-status:
    #needs: [check-approvals,deploy-single-component, deploy-phase-one, deploy-phase-two]
    #if: always()
    #continue-on-error: true
    #runs-on: ubuntu-latest
    #outputs: 
      #phase1op: ${{ steps.report.outputs.Phase1status }}
      #phase2op: ${{ steps.report.outputs.Phase2status }}
      #phaseop: ${{ steps.report.outputs.Phasestatus }}
          
    #steps:
      #- name: Report job statuses
        #id: report
        #run: |
          #echo "Phase1status=${{ needs.Phase1.result }}" >> $GITHUB_OUTPUT
          #echo "Phase2status=${{ needs.Phase2.result }}" >> $GITHUB_OUTPUT
          #echo "comp1status:${{ needs.Phase1.outputs.compstatus1 }}" 
          #echo "comp2status:${{ needs.Phase1.outputs.compstatus2 }}" 
          #echo "comp01status:${{ needs.Phase2.outputs.compstatus1 }}" 
          #echo "comp02status:${{ needs.Phase2.outputs.compstatus2 }}"

          #Phasestatus="phase 1 status: ${{ needs.Phase1.result }}, " 
          #Phasestatus+="phase 2 status: ${{ needs.Phase2.result }}, "
          #Phasestatus+="phase 3 status: ${{ needs.Phase3.result }}"
          #Phasestatus="check-approvals status: ${{ needs.check-approvals.result }}, "
          #Phasestatus+="deploy-single-component status: ${{ needs.deploy-single-component.result }}, " 
          #Phasestatus+="deploy-phase-one status: ${{ needs.deploy-phase-one.result }}, "
          #Phasestatus+="deploy-phase-two status: ${{ needs.deploy-phase-two.result }}"
          #echo "Phasestatus=$Phasestatus" >> $GITHUB_OUTPUT 

  collect-status-new:
    needs: [check-approvals,deploy-single-component, deploy-phase-one, deploy-phase-two]
    runs-on: ubuntu-latest
    outputs:
       phaseop: ${{ steps.consolidated_status.outputs.all_statuses }}
    if: always()  # Ensures this runs even if some jobs fail
    steps:
      - name: Get Job Statuses from GitHub API
        id: get_status_new
        run: |
          STATUSES=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs" | \
          jq -r '[.jobs[] | select(.name != "collect-status-new") | "\(.name) status: \(.conclusion // "in_progress")"] | join(", ")')

          echo "Collected statuses: $STATUSES"
          echo "statuses=$STATUSES" >> "$GITHUB_ENV"
        shell: bash

      #- name: Determine Consolidated Statuses
        #id: consolidated_status
        #run: |
          # Extract required job statuses
          #CHECK_APPROVALS_STATUS=$(echo "${{ env.statuses }}" | grep -oE "check-approvals status: [a-zA-Z]+" | awk '{print $NF}')
          #DEPLOY_PHASE_ONE_STATUS=$(echo "${{ env.statuses }}" | grep -oE "deploy-phase-one status: [a-zA-Z]+" | awk '{print $NF}')
          #DEPLOY_PHASE_TWO_STATUS=$(echo "${{ env.statuses }}" | grep -oE "deploy-phase-two status: [a-zA-Z]+" | awk '{print $NF}')
    
          # Extract statuses for deploy-single-component's child jobs
          #COMPONENT_MATRIX_STATUS=$(echo "${{ env.statuses }}" | grep -oE "create-component-matrix status: [a-zA-Z]+" | awk '{print $NF}')
          #DEPLOY_TO_AZ_SERVICE_STATUS=$(echo "${{ env.statuses }}" | grep -oE "deploy-to-AzService status: [a-zA-Z]+" | awk '{print $NF}')
    
          # Determine deploy-single-component status based on its children
          #if [[ "$COMPONENT_MATRIX_STATUS" == "failure" || "$DEPLOY_TO_AZ_SERVICE_STATUS" == "failure" ]]; then
             #DEPLOY_SINGLE_STATUS="failure"
          #elif [[ "$COMPONENT_MATRIX_STATUS" == "in_progress" || "$DEPLOY_TO_AZ_SERVICE_STATUS" == "in_progress" ]]; then
             #DEPLOY_SINGLE_STATUS="in_progress"
          #else
             #DEPLOY_SINGLE_STATUS="success"
          #fi

          # Combine all statuses
          #ALL_STATUSES="check-approvals status: $CHECK_APPROVALS_STATUS, "
          #ALL_STATUSES+="deploy-single-component status: $DEPLOY_SINGLE_STATUS, "
          #ALL_STATUSES+="deploy-phase-one status: $DEPLOY_PHASE_ONE_STATUS, "
          #ALL_STATUSES+="deploy-phase-two status: $DEPLOY_PHASE_TWO_STATUS"

          #echo "Final Collected Statuses: $ALL_STATUSES"
          #echo "all_statuses=$ALL_STATUSES" >> "$GITHUB_OUTPUT"
        #shell: bash   works correctly for single not for fullstack
  
          
      #- name: Extract Required Job Statuses
        #id: filter_statuses
        #run: |
          # Extract only create-component-matrix and deploy-to-AzService statuses
          #COMPJOB=$(echo "${{ env.statuses }}" | grep -oE "create-component-matrix status: [a-zA-Z]+|deploy-to-AzService status: [a-zA-Z]+" | paste -sd ", ")
          #COMPJOB=$(echo "${{ env.statuses }}" | grep -oE "check-approvals status: [a-zA-Z]+|call-phase / deploy-single-component / [a-zA-Z-]+ status: [a-zA-Z]+|deploy-phase-one status: [a-zA-Z]+|deploy-phase-two status: [a-zA-Z]+" | paste -sd ", ")
          #COMPJOB=$(echo "${{ env.statuses }}" | grep -oE "check-approvals status: [a-zA-Z]+|deploy-single-component status: [a-zA-Z]+|deploy-phase-one status: [a-zA-Z]+|deploy-phase-two status: [a-zA-Z]+" | paste -sd ", ")

          #echo "Filtered statuses: $COMPJOB"
          #echo "compjobnew=$COMPJOB" >> "$GITHUB_OUTPUT"
        #shell: bash

      - name: Determine Consolidated Statuses
        id: consolidated_status
        run: |
          declare -A STATUSES_MAP
          PHASES=("check-approvals" "deploy-single-component" "deploy-phase-one" "deploy-phase-two")

          # Extract and store job statuses dynamically
          for PHASE in "${PHASES[@]}"; do
            if [[ "$PHASE" == "deploy-single-component" ]]; then
              CHILD_JOBS=("create-component-matrix" "deploy-to-AzService")
              CHILD_STATUS=()
        
           for JOB in "${CHILD_JOBS[@]}"; do
             STATUS=$(echo "${{ env.statuses }}" | grep -oE "$JOB status: [a-zA-Z]+" | awk '{print $NF}')
             [[ -n "$STATUS" ]] && CHILD_STATUS+=("$STATUS")
           done

           if [[ " ${CHILD_STATUS[@]} " =~ "failure" ]]; then
             STATUSES_MAP[$PHASE]="failure"
           elif [[ " ${CHILD_STATUS[@]} " =~ "in_progress" ]]; then
             STATUSES_MAP[$PHASE]="in_progress"
           elif [[ ${#CHILD_STATUS[@]} -eq 0 ]]; then
             STATUSES_MAP[$PHASE]="skipped"
           else
             STATUSES_MAP[$PHASE]="success"
           fi

           else
             JOB_STATUSES=$(echo "${{ env.statuses }}" | grep -oE "$PHASE( / [^,]+)? status: [a-zA-Z]+" | awk '{print $NF}')
        
           if echo "$JOB_STATUSES" | grep -q "failure"; then
             STATUSES_MAP[$PHASE]="failure"
           elif echo "$JOB_STATUSES" | grep -q "in_progress"; then
             STATUSES_MAP[$PHASE]="in_progress"
           elif [[ -z "$JOB_STATUSES" ]]; then
             STATUSES_MAP[$PHASE]="skipped"
           else
             STATUSES_MAP[$PHASE]="success"
           fi
          fi
          done

            # Combine all statuses dynamically
           ALL_STATUSES=""
          for PHASE in "${PHASES[@]}"; do
             ALL_STATUSES+="$PHASE status: ${STATUSES_MAP[$PHASE]}, "
          done

          ALL_STATUSES="${ALL_STATUSES%, }"  # Trim trailing comma
          echo "Final Collected Statuses: $ALL_STATUSES"
          echo "all_statuses=$ALL_STATUSES" >> "$GITHUB_OUTPUT"
        shell: bash
