name: Deploy Comp1

on:
 #push: 
 workflow_call:
    inputs:
      component:
        type: string
        required: true
      environment:
        type: string
        required: true
      runner:
        type: string
        required: true
    outputs:
      compstatus:
        #value: ${{ jobs.component-status.outputs.output1 }}
        value: ${{ jobs.collect-status.outputs.output1 }}
    
jobs:
  create-component-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Job 1 step
        id: step1
        run: |
          echo "firstword=job1 from deploy component" 

  deploy-to-AzService:
    runs-on: ubuntu-latest
    needs: create-component-matrix
    steps:
      - name: Job 2 step
        id: step2  # We add an ID for job2
        run: |
          echo "secondword=job2 from deploy component" 
  
  collect-status:
    needs: [create-component-matrix, deploy-to-AzService]
    runs-on: ubuntu-latest
    outputs:
       output1: ${{ steps.get_status_new.outputs.filtered_statuses }}
    if: always()  # Ensures this runs even if some jobs fail   
    steps:
      - name: Checking new method
        id: get_status_new
        run: |
          # Fetch the jobs JSON from GitHub API
          JOBS_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs")

           # Extract unique job names dynamically
           JOB_NAMES=$(echo "$JOBS_JSON" | jq -r '[.jobs[].name] | unique | join("|")')

           # Extract statuses dynamically based on detected job names
           STATUSES=$(echo "$JOBS_JSON" | jq -r --arg JOB_NAMES "$JOB_NAMES" '
           [.jobs[] | 
           select(.name | test($JOB_NAMES)) | 
           "\(.name) status: \(.conclusion // "in_progress")"] | join(", ")')

           echo "Filtered statuses: $STATUSES"
           echo "filtered_statuses=$STATUSES" >> "$GITHUB_ENV"
          shell: bash
      #- name: Get Job Statuses from GitHub API
        #id: get_status
        #run: |
          #STATUSES=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            #-H "Accept: application/vnd.github+json" \
            #"https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs" | \
            #jq -r '[.jobs[] | select(.name != "collect-status") | "\(.name) status: \(.conclusion // "in_progress")"] | join(", ")')

          #echo "Collected statuses: $STATUSES"
          #echo "statuses=$STATUSES" >> "$GITHUB_ENV"
        #shell: bash
      
      #- name: Extract Job Statuses
        #id: collected_statuses
        #run: |
          # Extract only create-component-matrix and deploy-to-AzService statuses
          #COMPJOB=$(echo "${{ env.statuses }}" | grep -oE "create-component-matrix status: [a-zA-Z]+|deploy-to-AzService status: [a-zA-Z]+" | paste -sd ", ")

          #echo "Filtered statuses: $COMPJOB"
          #echo "compjob=$COMPJOB" >> "$GITHUB_OUTPUT"
        #shell: bash

      #- name: Extract Required Job Statuses
        #id: filter_statuses
        #run: |
          # Dynamically extract job statuses excluding "collect-status"
          #COMPJOB=$(echo "${{ env.statuses }}" | grep -oE "[a-zA-Z0-9-]+ status: [a-zA-Z]+" | grep -v "collect-status" | paste -sd ", ")

          #echo "Filtered statuses: $COMPJOB"
          #echo "compjob=$COMPJOB" >> "$GITHUB_OUTPUT"
        #shell: bash  
      
