name: Deploy Phase New

on:
  workflow_call:
    inputs:
      component:
        type: string
        required: true
      environment:
        type: string
        required: true
      runner:
        type: string
        required: true
    outputs:
      phase-status:
        value: ${{ jobs.phase-status.outputs.phaseop }}
      comp-status-phase1:
        value: ${{ jobs.deploy-single-component.outputs.compstatus }}
      comp-status-phase2:
        value: ${{ jobs.deploy-phase-one.outputs.compstatus }}
      comp-status-phase3:
        value: ${{ jobs.deploy-phase-two.outputs.compstatus }}

jobs:
  check-approvals:
    runs-on: ubuntu-latest
    steps:
      - name: Approval step
        id: step2
        run: |
          echo "Approval-check=Test for approval" 

  deploy-single-component:
    if: ${{ ! contains(inputs.component, 'fullstack') }}
    uses: ./.github/workflows/Deploy-componentnew.yml
    with: 
      component: ${{ inputs.component }}
      environment: ${{ inputs.environment }}
      runner: ${{ inputs.runner }}

  deploy-phase-one:
    if: ${{ inputs.component == 'fullstack' }}
    uses: ./.github/workflows/Deploy-componentnew.yml
    with: 
      component: ${{ inputs.component }}
      environment: ${{ inputs.environment }}
      runner: ${{ inputs.runner }}

  deploy-phase-two:
    if: ${{ inputs.component == 'fullstack' }}
    needs: deploy-phase-one
    uses: ./.github/workflows/Deploy-componentnew.yml
    with: 
      component: ${{ inputs.component }}
      environment: ${{ inputs.environment }}
      runner: ${{ inputs.runner }}

  phase-status:
    needs: [check-approvals, deploy-single-component, deploy-phase-one, deploy-phase-two]
    if: always()
    continue-on-error: true
    runs-on: ubuntu-latest
    outputs: 
      phaseop: ${{ steps.report.outputs.Phasestatus }}
    steps:
      - name: Report job statuses
        id: report
        run: |
          jobs=(
            "check-approvals"
            "deploy-single-component"
            "deploy-phase-one"
            "deploy-phase-two"
          )
          
          phaseop=""
          for job in "${jobs[@]}"; do
            job_status="${{ needs[$job].result }}"
            phaseop+="$job status: $job_status, "
          done
          
          # Clean up trailing comma and space
          phaseop="${phaseop%, }"
          
          echo "Phasestatus=$phaseop" >> $GITHUB_OUTPUT
