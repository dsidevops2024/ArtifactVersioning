name: MultipleTargetEnv Workflow

on:
  workflow_dispatch:
    inputs:
      component:
        description: 'Input the component to deploy full stack?'
        required: true
        type: string
      environment:
        description: 'Choose env to deploy (Dev or Prod)?'
        required: true
        type: choice
        options:
          - dev
          - prod
      prod_sub_env:
        description: 'Specify the client(s) to deploy (comma-separated for multiple env)'
        required: false
        type: string
        default: 'all'

jobs:
  create-environment-matrix:
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.env-matrix.outputs.env }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get environment input and create matrix
        id: env-matrix
        shell: bash
        run: |
          selected_envs=""
          
          if [[ "${{ inputs.environment }}" == "prod" ]]; then
            if [[ "${{ inputs.prod_sub_env }}" == "all" ]]; then
              # If 'all' is selected, include all environments from the prod-clients.json
              selected_envs=$(cat ./client-manifests/${{ inputs.environment }}-clients.json | jq -c '.[]')
            else
              # Split the comma-separated string into an array and process each
              IFS=',' read -ra target_envs <<< "${{ inputs.prod_sub_env }}"
              for env in "${target_envs[@]}"; do
                matching_env=$(jq -c ".[] | select(.env == \"$env\")" ./client-manifests/${{ inputs.environment }}-clients.json)
                if [[ -z "$matching_env" ]]; then
                  echo "Error: No matching environment found for '$env' in '${{ inputs.environment }}'"
                  exit 1
                else
                  # Append the matching environment to the selected_envs
                  selected_envs="$selected_envs$matching_env,"
                fi
              done
              # Remove trailing comma from selected_envs
              selected_envs="${selected_envs%,}"
            fi
          else
            # For dev environment, just read the entire file
            selected_envs=$(cat ./client-manifests/${{ inputs.environment }}-clients.json | jq -c '.[]')
          fi

          # Set the output as the selected environments
          echo "env=$selected_envs" >> $GITHUB_OUTPUT

      - name: Print the selected environment(s)
        run: |
          echo "Selected environment(s): ${{ steps.env-matrix.outputs.env }}"

  check-component-input:
    runs-on: ubuntu-latest
    needs: create-environment-matrix
    outputs:
      runner: ${{ steps.env-runner.outputs.runner }}

    steps:
      - name: set runner group
        id: env-runner
        run: |
          if [[ "${{ inputs.environment }}" == "prod" ]]; then
            echo "runner=prod" >> $GITHUB_OUTPUT
          else
            echo "runner=Nonprod" >> $GITHUB_OUTPUT
