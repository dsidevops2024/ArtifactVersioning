name: ci-backend

on:
  push:
    paths:
      - 'backend/Receivers/**'
      - 'backend/Scheduler/**'

jobs:
  Changed-Files-JSON:
    runs-on: ubuntu-latest
    outputs:
      components: ${{ steps.json-format.outputs.components }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}

      - name: Get raw list of changed file paths
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "changed_files=$(git diff --name-only -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
          else
            echo "changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
          fi

      - name: Map files to components
        id: json-format
        shell: bash
        run: |
          list=""
          titles=""
          
           for file in ${{ steps.changed-files.outputs.changed_files }}; do
             # Extract third path segment: backend/<group>/<component>/...
             component=$(echo "$file" | cut -d'/' -f3)
             #path="${file#backend/}" -old code
             #component="${path%%/*}" -old code
             if [[ -z "$component" ]]; then
               echo "Skipped file: $file (couldn't determine component)"
               continue
             fi

             jq_output=$(jq -c "map(select(.title==\"${component}\")) | first" backend/backend-components.json)
            
             if [[ "$jq_output" != "null" && -n "$jq_output" ]]; then
               list="${list}${jq_output},"
               titles="${titles}${component} "
             else
              echo "No component found for $component"
             fi
             done

             # Wrap list in brackets, remove trailing comma, deduplicate by title
             list="[${list%,}]"
             components=$(echo "$list" | jq -c 'unique_by(.title)')
             titles=$(echo "$titles" | xargs -n1 | sort -u | tr '\n' ' ')

             echo "components=${components}" >> $GITHUB_OUTPUT
             echo "component_titles=${titles}" >> $GITHUB_OUTPUT
             echo "Detected components: $components"
             echo "✅ Component titles: $titles"

  Build-Changed-Components:
    needs: Changed-Files-JSON
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ${{ fromJson(needs.Changed-Files-JSON.outputs.components) }}
    defaults:
      run:
        working-directory: backend/${{ matrix.component.srcPath }}

    steps:
      - uses: actions/checkout@v4
      - name: Debug output
        run: |
          echo "Raw components: ${{ needs.Changed-Files-JSON.outputs.components }}"
          echo "Parsed components:"
          echo '${{ toJson(fromJson(needs.Changed-Files-JSON.outputs.components)) }}'

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean install -DskipTests
        
      - name: Download version-info artifact (main only)
        if: github.ref == 'refs/heads/main'
        uses: dawidd6/action-download-artifact@v3
        with:
          name: version-info
          workflow: pr-version-push.yml
          workflow_conclusion: success
          branch: main
          repo: ${{ github.repository }}
          path: ./version-data
          github_token: ${{ secrets.GITHUB_TOKEN }}
          if_no_artifact_found: fail

      - name: Determine REPO_PATH
        id: repo_path
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          COMPONENT="${{ matrix.component.title }}"

          if [[ "$BRANCH_NAME" == "main" ]]; then
            VERSION=$(jq -r --arg key "$COMPONENT" '.[$key]' ./version-data/version.json)

            if [[ -z "$VERSION" || "$VERSION" == "null" ]]; then
              echo "❌ Version missing for $COMPONENT"
              exit 1
            fi

            REPO_PATH="sb-dev-generic-local/main/$VERSION/$COMPONENT"
            echo "✅ Main branch build for $COMPONENT: $REPO_PATH"
          else
            REPO_PATH="sb-dev-generic-local/$BRANCH_NAME/$COMPONENT"
            echo "🟡 Non-main branch build for $COMPONENT: $REPO_PATH"
          fi

          echo "REPO_PATH=$REPO_PATH" >> $GITHUB_ENV
          echo "REPO_PATH=$REPO_PATH"

      - name: Push artifact to Artifactory
        run: |
          echo "Pushing artifact to Artifactory..."
          echo "Repo path: $REPO_PATH"

      #- name: Update JSON_VERSIONS GitHub org variable (main only)
        #if: github.ref == 'refs/heads/main'
        #run: |
          #EXISTING=$(gh variable get JSON_VERSIONS --org dsidevops2024 --json value -q .value)
          #echo "$EXISTING" > existing.json

          #VERSION=$(jq -r '.mvc' ./version-data/version.json)
          #echo "{\"mvc\":\"$VERSION\"}" > update.json

          #MERGED=$(jq -s '.[0] * .[1]' existing.json update.json)

          #echo "✅ Merged version JSON: $MERGED"
          #gh variable set JSON_VERSIONS --body "$MERGED" --org dsidevops2024 --visibility all
        #env:
          #GH_TOKEN: ${{ secrets.AVPAT_TOKEN }}
