name: ci-backend

on:
  #workflow_dispatch:
  workflow_call:
    inputs:
      version_json:
        required: true
        type: string
  push:
    paths:
      - 'backend/Receivers/**'
      - 'backend/Scheduler/**'

jobs:
  Changed-Files-JSON:
    runs-on: ubuntu-latest
    outputs:
      components: ${{ steps.json-format.outputs.components }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}

      - name: Get raw list of changed file paths
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "changed_files=$(git diff --name-only -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
          else
            echo "changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
          fi

      - name: Map files to components
        id: json-format
        shell: bash
        run: |
          list=""
          titles=""
          
           for file in ${{ steps.changed-files.outputs.changed_files }}; do
             # Extract third path segment: backend/<group>/<component>/...
             component=$(echo "$file" | cut -d'/' -f3)
             #path="${file#backend/}" -old code
             #component="${path%%/*}" -old code
             if [[ -z "$component" ]]; then
               echo "Skipped file: $file (couldn't determine component)"
               continue
             fi

             jq_output=$(jq -c "map(select(.title==\"${component}\")) | first" backend/backend-components.json)
            
             if [[ "$jq_output" != "null" && -n "$jq_output" ]]; then
               list="${list}${jq_output},"
               titles="${titles}${component} "
             else
              echo "No component found for $component"
             fi
             done

             # Wrap list in brackets, remove trailing comma, deduplicate by title
             list="[${list%,}]"
             components=$(echo "$list" | jq -c 'unique_by(.title)')
             titles=$(echo "$titles" | xargs -n1 | sort -u | tr '\n' ' ')

             echo "components=${components}" >> $GITHUB_OUTPUT
             echo "component_titles=${titles}" >> $GITHUB_OUTPUT
             echo "Detected components: $components"
             echo "✅ Component titles: $titles"

  Build-Changed-Components:
    needs: Changed-Files-JSON
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ${{ fromJson(needs.Changed-Files-JSON.outputs.components) }}
    defaults:
      run:
        working-directory: backend/${{ matrix.component.srcPath }}

    steps:
      - uses: actions/checkout@v4
      - name: Debug output
        run: |
          echo "Raw components: ${{ needs.Changed-Files-JSON.outputs.components }}"
          echo "Parsed components:"
          echo '${{ toJson(fromJson(needs.Changed-Files-JSON.outputs.components)) }}'

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean install -DskipTests
        
      - name: Extract backend comp version from version_json input
        id: extract_version
        shell: bash
        env:
          VERSION_JSON: ${{ inputs.version_json }}
          REF_NAME: ${{ github.ref_name }}
          BASE_REF: ${{ github.base_ref }}
          HEAD_REF: ${{ github.head_ref }}
        run: |
          echo "$VERSION_JSON" > version.json
          MVC_VERSION=$(jq -r '.mvc' version.json)
          echo "✅ Extracted MVC version: $MVC_VERSION"
          echo "MVC_VERSION=$MVC_VERSION" >> $GITHUB_ENV

          # Determine if this is a PR targeting main or a push to main
          if [[ "$REF_NAME" == "main" || "$BASE_REF" == "main" ]]; then
            BRANCH_PATH="main"
          elif [[ -n "$HEAD_REF" ]]; then
            BRANCH_PATH="$HEAD_REF"
          else
            BRANCH_PATH="$REF_NAME"
          fi

          if [[ "$BRANCH_PATH" == "main" ]]; then
            REPO_PATH="sb-dev-generic-local/main/$MVC_VERSION/mvc"
          else
            REPO_PATH="sb-dev-generic-local/$BRANCH_PATH/mvc"
          fi

          echo "Using repo path: $REPO_PATH"
          echo "REPO_PATH=$REPO_PATH" >> $GITHUB_ENV

      - name: Push artifact to Artifactory (placeholder)
        run: |
          echo "Pushing artifact to Artifactory..." 
          echo "Repo path: $REPO_PATH"
