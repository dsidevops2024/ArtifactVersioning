name: ci-backend

on:
  push:
    paths:
      - 'backend/Receivers/**'
      - 'backend/Scheduler/**'

jobs:
  Changed-Files-JSON:
    runs-on: ubuntu-latest
    outputs:
      components: ${{ steps.json-format.outputs.components }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}

      - name: Get raw list of changed file paths
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "changed_files=$(git diff --name-only -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
          else
            echo "changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
          fi

      - name: Map files to components
        id: json-format
        shell: bash
        run: |
          list=""
          titles=""
          
           for file in ${{ steps.changed-files.outputs.changed_files }}; do
             # Extract third path segment: backend/<group>/<component>/...
             component=$(echo "$file" | cut -d'/' -f3)
             #path="${file#backend/}" -old code
             #component="${path%%/*}" -old code
             if [[ -z "$component" ]]; then
               echo "Skipped file: $file (couldn't determine component)"
               continue
             fi

             jq_output=$(jq -c "map(select(.title==\"${component}\")) | first" backend/backend-components.json)
            
             if [[ "$jq_output" != "null" && -n "$jq_output" ]]; then
               list="${list}${jq_output},"
               titles="${titles}${component} "
             else
              echo "No component found for $component"
             fi
             done

             # Wrap list in brackets, remove trailing comma, deduplicate by title
             list="[${list%,}]"
             components=$(echo "$list" | jq -c 'unique_by(.title)')
             titles=$(echo "$titles" | xargs -n1 | sort -u | tr '\n' ' ')

             echo "components=${components}" >> $GITHUB_OUTPUT
             echo "component_titles=${titles}" >> $GITHUB_OUTPUT
             echo "Detected components: $components"
             echo "✅ Component titles: $titles"

  Build-Changed-Components:
    needs: Changed-Files-JSON
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ${{ fromJson(needs.Changed-Files-JSON.outputs.components) }}
    defaults:
      run:
        working-directory: backend/${{ matrix.component.srcPath }}

    steps:
      - uses: actions/checkout@v4
      - name: Debug output
        run: |
          echo "Raw components: ${{ needs.Changed-Files-JSON.outputs.components }}"
          echo "Parsed components:"
          echo '${{ toJson(fromJson(needs.Changed-Files-JSON.outputs.components)) }}'

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        shell: bash
        run: |
          #$mavenPath = "C:\Program Files\Apache\Maven\apache-maven-3.9.11\bin"
          #$env:Path += ";$mavenPath"
          mvn clean install -DskipTests

      - name: Calculate Versions and Changed Components
        if: github.ref == 'refs/heads/main'
        id: calculate
        uses: ./.github/actions/semversion-calculation
        #uses: ./.github/actions/version-bump
        with:
          github-token: ${{ secrets.AVPAT_TOKEN }}
          json-versions: ${{ vars.JSON_VERSIONS }}

      - name: Use calculated versions
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Updated Version JSON:"
          echo '${{ steps.calculate.outputs.version_json }}' | jq
          echo "Changed Components: ${{ steps.calculate.outputs.components }}"
          
      #- name: Download version-info artifact (main only)
        #if: github.ref == 'refs/heads/main'
        #uses: dawidd6/action-download-artifact@v3
        #with:
          #name: version-info
          #workflow: pr-version-push.yml
          #workflow_conclusion: success
          #branch: main
          #repo: ${{ github.repository }}
          #path: ./version-data
          #github_token: ${{ secrets.GITHUB_TOKEN }}
          #if_no_artifact_found: fail

      #- name: Determine REPO_PATH
        #shell: powershell
        #working-directory: ${{ github.workspace }}
        #id: repo_path
        #run: |
          #$branchName = "${env:GITHUB_REF}" -split '/' | Select-Object -Last 1
          #$component = "${{ matrix.component.title }}"
          #$versionJson = '${{ steps.calculate.outputs.version_json }}'
          #$versionJsonRaw = @'
          #${{ steps.calculate.outputs.version_json }}
          #'@

          #if ($branchName -eq 'main') {
            #try {
              #$version = ($versionJsonRaw | ConvertFrom-Json).$component
            #} catch {
              #Write-Error "❌ Failed to parse version for $component from version_json"
              #exit 1
            #}

            #if (-not $version) {
              #Write-Error "❌ Version missing for $component"
              #exit 1
            #}

            #$repoPath = "sb-dev-generic-local/main/$component/$version/"
            #Write-Host "✅ Main branch build for $component: $repoPath"
            #Write-Host "✅ Main branch build for ${component}: ${repoPath}"
            #} else {
              #$repoPath = "sb-dev-generic-local/$branchName/$component"
              #Write-Host "🟡 Non-main branch build for $component: $repoPath"
              #Write-Host "🟡 Non-main branch build for ${component}: ${repoPath}"
          #}

          # Set environment variable and output
          #"REPO_PATH=$repoPath" | Out-File -FilePath $env:GITHUB_ENV -Append
          #"REPO_PATH=$repoPath" | Write-Output
      
      - name: Determine REPO_PATH
        working-directory: ${{ github.workspace }}
        id: repo_path
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          COMPONENT="${{ matrix.component.title }}"

          if [[ "$BRANCH_NAME" == "main" ]]; then
            VERSION=$(echo '${{ steps.calculate.outputs.version_json }}' | jq -r --arg key "$COMPONENT" '.[$key]')

            if [[ -z "$VERSION" || "$VERSION" == "null" ]]; then
              echo "❌ Version missing for $COMPONENT"
              exit 1
            fi

            REPO_PATH="sb-dev-generic-local/main/$COMPONENT/$VERSION/"
            echo "✅ Main branch build for $COMPONENT: $REPO_PATH"
          else
            REPO_PATH="sb-dev-generic-local/$BRANCH_NAME/$COMPONENT"
            echo "🟡 Non-main branch build for $COMPONENT: $REPO_PATH"
          fi

          echo "REPO_PATH=$REPO_PATH" >> $GITHUB_ENV
          echo "REPO_PATH=$REPO_PATH"

      - name: Push artifact to Artifactory
        run: |
          echo "Pushing artifact to Artifactory..."
          echo "Repo path: $REPO_PATH"
          #echo "Repo path: $env:REPO_PATH"
          
      #- name: Update JSON_VERSIONS GitHub org variable (main only)
        #if: github.ref == 'refs/heads/main'
        #shell: pwsh
        #working-directory: ${{ github.workspace }}
        #env:
          #GH_TOKEN: ${{ secrets.AVPAT_TOKEN }}
        #run: |
          #$component = "${{ matrix.component.title }}"

          #if ([string]::IsNullOrWhiteSpace($component)) {
            #Write-Error "❌ Component title not set."
            #exit 1
          #}

          # Fetch existing GitHub org variable
          #$existing = gh variable get JSON_VERSIONS --org dsidevops2024 --json value --jq '.value'
          #if (-not $existing) {
            #Write-Host "⚠️ No existing JSON_VERSIONS value found. Initializing empty object."
            #$existing = "{}"
          #}
          #$existing | Out-File -FilePath existing.json -Encoding utf8

          # Parse version from version_json
          #$versionJson = '${{ steps.calculate.outputs.version_json }}' 
          #try {
            #$parsedJson = $versionJson | ConvertFrom-Json
            #$version = $parsedJson.$component
          #} catch {
            #Write-Error "❌ Failed to parse version_json or extract version."
            #exit 1
          #}

          #if ([string]::IsNullOrWhiteSpace($version)) {
            #Write-Error "❌ Version not found for $component"
            #exit 1
          #}

          # Write update object
          #$updateObj = @{ $component = $version } | ConvertTo-Json -Compress
          #$updateObj | Out-File -FilePath update.json -Encoding utf8

          # Merge using jq (jq must be available in the runner)
          #$merged = & jq -s '.[0] * .[1]' existing.json update.json

          #if (-not $merged) {
            #Write-Error "❌ Failed to merge JSON."
            #exit 1
          #}

          #Write-Host "✅ Merged version JSON: $merged"

          # Update GitHub org variable
          #gh variable set JSON_VERSIONS --body "$merged" --org dsidevops2024 --visibility all

      - name: Update JSON_VERSIONS GitHub org variable (main only)
        if: github.ref == 'refs/heads/main'
        working-directory: ${{ github.workspace }}
        run: |
          COMPONENT="${{ matrix.component.title }}"
          if [[ -z "$COMPONENT" ]]; then
            echo "❌ Component title not set."
            exit 1
          fi
          
          EXISTING=$(gh variable get JSON_VERSIONS --org dsidevops2024 --json value -q .value)
          echo "$EXISTING" > existing.json

          VERSION=$(echo '${{ steps.calculate.outputs.version_json }}' | jq -r --arg key "$COMPONENT" '.[$key]')
          #VERSION=$(jq -r --arg key "$COMPONENT" '.[$key]' ./version-data/version.json)
          if [[ -z "$VERSION" || "$VERSION" == "null" ]]; then
            echo "❌ Version not found for $COMPONENT"
            exit 1
          fi

          echo "{\"$COMPONENT\":\"$VERSION\"}" > update.json   
          MERGED=$(jq -s '.[0] * .[1]' existing.json update.json)

          echo "✅ Merged version JSON: $MERGED"
          gh variable set JSON_VERSIONS --body "$MERGED" --org dsidevops2024 --visibility all
        env:
          GH_TOKEN: ${{ secrets.AVPAT_TOKEN }}
