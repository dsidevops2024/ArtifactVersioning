name: SphereTargetEnv Workflow
 
on:
  workflow_dispatch:
    inputs:
      component:
        description: 'Input the component to deploy full stack?'
        required: true
        type: string
      environment:
        description: 'Choose  env to deploy (Dev or Prod)?'
        required: true
        type: choice
        options:
          - dev
          - prod
      prod_sub_env:
        description: 'specify the client you want to deploy(comma-separated for multiple env)'
        required: false
        type: string
        default: 'all'
             
jobs:
  create-environment-matrix:
     runs-on: ubuntu-latest
     
     outputs:
      env: ${{ steps.env-matix.outputs.env }}
     steps: 
      - name: Checkout Repository
        uses: actions/checkout@v3 
      - name: Get environment input and create matrix
        id: env-matrix
        shell: bash
        run: |
          if [[ "${{ inputs.environment }}" == "prod" ]]; then
            if [[ "${{ inputs.prod_sub_env }}" == "all" ]]; then
              # If the user chooses 'all', include all environments
              echo "env=$(cat ./client-manifests/${{ inputs.environment }}-clients.json | jq -r '.[] | .env')" >> $GITHUB_OUTPUT
            else 
             # Split the comma-separated string into an array
             IFS=',' read -ra target_env <<< "${{ inputs.prod_sub_env }}"
                 # Initialize an empty string to hold the environments
             all_envs=""
               # Loop through each environment
                 for env in "${target_env[@]}"; do
                     matching_env=$(jq -r ".[] | select(.env == \"$env\") | .env" ./client-manifests/${{ inputs.environment }}-clients.json)
                     if [[ -z "$matching_env" ]]; then
                       echo "Error: No matching environment found for '$env' in '${{ inputs.environment }}'"
                     exit 1
                     else
                      # Append each matching environment to the all_envs variable
                       all_envs+="$matching_env"$'\n'
                     fi
                  done

                 # Output the concatenated environments to GitHub Actions
                   echo "env=$all_envs" >> $GITHUB_OUTPUT
               fi  
          else
             echo "env=$(cat ./client-manifests/${{ inputs.environment }}-clients.json | jq -r '.[] | .env')" >> $GITHUB_OUTPUT
          fi

        
          #if [[ "${{ inputs.environment }}" == "prod" ]]; then
            #if [[ "${{ inputs.prod_sub_env }}" == "all" ]]; then
               #echo "env=$(cat ./client-manifests/${{ inputs.environment }}-clients.json | jq -c)" >> $GITHUB_OUTPUT
            #else 
               # Split the comma-separated string into an array
               #IFS=',' read -ra target_env <<< "${{ inputs.prod_sub_env }}"

               #for env in "${target_env[@]}"; do
                   #matching_env=$(jq -c ".[] | select(.env == \"$env\")" ./client-manifests/${{ inputs.environment }}-clients.json)

                  #if [[ -z "$matching_env" ]]; then
                    #echo "Error: No matching environment found for '$env' in '${{ inputs.environment }}'"
                    #exit 1
                  #else
                    #echo "env=$matching_env" >> $GITHUB_OUTPUT
                  #fi
               #done
            #fi  
          #else
            #echo "env=$(cat ./client-manifests/${{ inputs.environment }}-clients.json | jq -c)" >> $GITHUB_OUTPUT
          #fi
          
      - name: Print the selected environment
        run: |
          echo "Selected environment: ${{ steps.env-matrix.outputs.env }}"
           
  check-component-input:
     runs-on: ubuntu-latest
     needs: create-environment-matrix
     outputs:
      runner: ${{ steps.env-runner.outputs.runner }}
     steps: 
      - name: set runner group
        id: env-runner
        run: |
           if [[ "${{ inputs.environment }}" == "prod" ]]; then
           #&& -n "needs.create-environment-matrix.outputs.env" ]]; then
              echo "runner=prod" >> $GITHUB_OUTPUT
           else
              echo "runner=Nonprod" >> $GITHUB_OUTPUT
           fi
          
