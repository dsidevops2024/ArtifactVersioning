name: SphereTargetEnv Workflow
 
on:
  workflow_dispatch:
    inputs:
      component:
        description: 'Input the component to deploy full stack?'
        required: true
        type: string
      environment:
        description: 'Choose  env to deploy (Dev or Prod)?'
        required: true
        type: choice
        options:
          - dev
          - prod
      prod_sub_env:
        description: 'specify the client you want to deploy'
        required: true
        type: string
             
jobs:
 
  #check-component-input:
    #runs-on: ubuntu-latest
    #environment: ${{ inputs.environment }} 
    #outputs:
     # components: ${{ steps.component-input.outputs.components }}
      
    #steps:
      #- name: Checkout Repository
       # uses: actions/checkout@v3  
     
     
  create-environment-matrix:
     
     runs-on: ubuntu-latest
     outputs:
      env: ${{ steps.env-matix.outputs.env }}
     steps: 
      - name: get env input and created matrix 
        id: env-matrix
        shell: bash
        run: |
          if [[ "${{ inputs.environment }}" == "prod" ]]; then
             selected_env="${{ inputs.prod_sub_env }}"
             matching_env=$(jq -r ".[] | select(.env == \"$selected_env\")" ./client-manifests/prod-clients.json)
             if [[ -z "$matching_env" ]]; then
               echo "Error:No matching"
               exit 1
             else
               echo "env=$matching_env" >> $GITHUB_OUTPUT
             fi
           else
             echo "env={}" >> $GITHUB_OUTPUT
           fi
      - name: Print the selected environment
        run: |
          echo "Selected environment: ${{ steps.env-matrix.outputs.env }}"
           
  check-component-input:
     runs-on: ubuntu-latest
     needs: create-environment-matrix
     steps: 
      - name: get env input and created matrix 
        run: |
           if [[ "${{ inputs.environment }}" == "prod" && -n "needs.create-environment-matrix.outputs.env" ]]; then
              echo "env is set correctly"
           else
             echo "error throw"
           fi
          
