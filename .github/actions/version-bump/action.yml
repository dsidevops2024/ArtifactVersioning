name: 'Calculate Artifact Versions'
description: 'Detect changed components, semver label, and bump version'

inputs:
  github-token:
    description: 'GitHub Token'
    required: true
  sem-versions:
    description: 'JSON_VERSIONS org variable value'
    required: true

outputs:
  version_json:
    description: 'Updated version JSON'
    value: ${{ steps.bump_json.outputs.updated_json }}
  components:
    description: 'List of changed components'
    value: ${{ steps.components.outputs.components }}

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Authenticate GitHub CLI
      shell: pwsh
      run: |
        "${{ inputs.github-token }}" | gh auth login --with-token

    - name: Get merged PR info
      id: pr
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        $sha = "${{ github.sha }}"
        $pr = gh pr list --state merged --limit 20 --json number,mergeCommit,baseRefName,headRefName,labels,mergeCommit |
          ConvertFrom-Json |
          Where-Object { $_.mergeCommit.oid -eq $sha }

        $pr | ConvertTo-Json -Depth 10 | Out-File -FilePath pr.json -Encoding UTF8

        "PR_NUMBER=$($pr.number)" | Out-File -FilePath $env:GITHUB_ENV -Append
        "BASE_REF=$($pr.baseRefName)" | Out-File -FilePath $env:GITHUB_ENV -Append
        "HEAD_REF=$($pr.headRefName)" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Get PR labels
      id: labels
      shell: pwsh
      run: |
        $labels = (Get-Content -Raw pr.json | ConvertFrom-Json).labels.name
        $type = ""
        if ($labels -contains "semver:major") {
          $type = "major"
        } elseif ($labels -contains "semver:minor") {
          $type = "minor"
        } elseif ($labels -contains "semver:patch") {
          $type = "patch"
        } else {
          Write-Error "No valid semver label found."
          exit 1
        }

        "type=$type" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Detect changed components
      id: components
      shell: pwsh
      run: |
        git fetch origin Test-main-versioning
        $files = git diff --name-only HEAD^1 HEAD
        Write-Host "Changed files:"
        $files

        $componentsFromYml = ($files | Where-Object { $_ -match 'ci-(.+)\.yml' } | ForEach-Object {
          ($_ -split 'ci-')[1] -replace '\.yml', ''
        })

        $componentsFromDir = $files | Where-Object { ($_ -split '/')[0] -notin ".github", "backend" } |
          ForEach-Object { ($_ -split '/')[0] } | Sort-Object -Unique

        $components = $componentsFromYml + $componentsFromDir

        $backendFiles = $files | Where-Object { $_ -like 'backend/*' }

        if ($backendFiles.Count -gt 0) {
          $jsonFile = "backend/backend-components.json"
          try {
            $backendJson = Get-Content $jsonFile | ConvertFrom-Json
          } catch {
            Write-Error "Invalid JSON in $jsonFile"
            exit 1
          }

          $matchedBackend = @()
          foreach ($file in $files) {
            foreach ($item in $backendJson) {
              if ($file -like "*$($item.title)*") {
                $matchedBackend += $item.title
              }
            }
          }

          $components += $matchedBackend | Sort-Object -Unique
        }

        $components = $components | Where-Object { $_ -ne "backend" } | Sort-Object -Unique
        if (-not $components) {
          Write-Error "No components changed. Exiting."
          exit 1
        }

        $componentStr = $components -join " "
        "components=$componentStr" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Bump version JSON
      id: bump_json
      shell: pwsh
      run: |
        $versionsJson = '${{ inputs.sem-versions }}' | ConvertFrom-Json
        $tmpJson = $versionsJson.PSObject.Copy()

        $bumpType = "${{ steps.labels.outputs.type }}"
        $components = "${{ steps.components.outputs.components }}" -split '\s+'

        foreach ($comp in $components) {
          if (-not $tmpJson.ContainsKey($comp)) { continue }

          $current = $tmpJson[$comp]
          $parts = $current -split '\.'
          [int]$major = $parts[0]
          [int]$minor = $parts[1]
          [int]$patch = $parts[2]

          switch ($bumpType) {
            "major" { $major++; $minor = 0; $patch = 0 }
            "minor" { $minor++; $patch = 0 }
            "patch" { $patch++ }
          }

          $newVersion = "$major.$minor.$patch"
          $tmpJson[$comp] = $newVersion
        }

        $finalJson = $tmpJson | ConvertTo-Json -Compress
        $finalJson | Out-File -FilePath version.json -Encoding utf8
        "updated_json=$finalJson" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
